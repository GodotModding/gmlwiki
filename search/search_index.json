{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Godot Mod Loader","text":""},{"location":"#what-is-the-godot-mod-loader","title":"What is the Godot Mod Loader?","text":"<p>GML is a generalized mod loader for GDScript-based Godot games. The mod loader allows users to create mods for games and distribute them as zips.</p> <p>Importantly, it provides methods to change existing scripts, scenes, and resources without modifying or distributing vanilla game files.</p> <p>We, the mod loader team, do not condone using or creating malicious mods and piracy of any kind. </p>"},{"location":"#downloads","title":"Downloads","text":"Godot 4Godot 3 <p>Mod Loader: GitHub</p> <p>Mod Dev Tool: GitHub</p> <p>Mod Loader: Asset Lib, GitHub</p> <p>Mod Dev Tool: Asset Lib, GitHub</p> <p>All stable Mod Loader versions: GitHub Releases All stable Mod Dev Tool versions: GitHub Releases</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Depending on what your goals are, setup of the mod loader will be slightly different.</p> <p>As a mod user, you usually don't have to do much at all. If you are lucky the game already has the mod loader integrated, and you just need to add your mods. If not, the self setup is only a download and placing files in the correct spot.</p> <p>As a game developer wishing to integrate the Mod Loader natively, you will only have to install it and add two autoloads. You can optionally configure a few aspects through the options.</p> <p>As a mod developer, it is recommended that you work on your mods with access to the vanilla source code.  Some games provide it, but for most, decompiling the game will be necessary.  There are several steps on the path of creating a mod to finally uploading it, but there are tools like the Mod Dev Tool and Steam Workshop Uploader to help you along the way.</p>"},{"location":"#mod-developer","title":"Mod Developer","text":"<p>It is recommended that you know a little bit about the Godot  game engine. You will be creating mods using the built-in scripting language GDScript  and distributing them as ZIPs. </p> Learn GDScript <p>Here is a starter on the language: overview  and language basics if you are a total beginner and like interactive courses, you can use Learn GDScript from Zero by GDQuest.  It's aimed at absolute beginners, so if you already know a programming language it might be a bit slow for you. And if you prefer videos you can watch the How to program in Godot - GDScript Tutorial by Brackey's</p> Note <p>Several games already have the Mod Loader integrated and some have specific help pages with game-specific information.</p> <ul> <li>Dome Keeper: DomeKeeperMods Wiki</li> <li>Brotato: Steam Workshop Guide</li> <li>Windowkill: Developer website</li> <li>Megaloot</li> <li>Endoparasitic</li> <li>Of Life and Land</li> </ul> <ol> <li>Decompile the Game (if the source code is not provided)</li> <li>Install Godot or GodotSteam<ul> <li>The decompilation log will tell you if it's default Godot or a custom build, in which case it's likely to be GodotSteam.     In some cases (like Windowkill) it's a completely custom engine version which may be provided by the developer.</li> <li>GodotSteam is mandatory if the game has Steam support like achievements or leaderboards</li> </ul> </li> <li>Set up your Godot project for modding (if the mod loader is not integrated yet)</li> <li>Create your Mod Structure</li> <li>Create your Mod Files</li> <li>Use the API Methods</li> <li>Easily Test and debug your mod</li> </ol>"},{"location":"#mod-user","title":"Mod user","text":"<p>Check if the Godot ModLoader is already integrated into the game you want to mod. If this is not the case then use the self setup</p>"},{"location":"#game-developer","title":"Game Developer","text":"<p>Add the Godot ModLoader to your project, feel free to join our Discord for any support!</p>"},{"location":"#versions-releases","title":"Versions &amp; Releases","text":"<ul> <li>Breaking Changes</li> <li>Upcoming Features</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>The Godot ModLoader is based on the brilliant work done for Delta-V-Modding.</p> <p>The core developers of GML are: KANA, Darkly77, Ste, and otDan.</p> <p></p> GML is possible thanks to all these wonderful people"},{"location":"404/","title":"404","text":"# 404 - Not Found Find a dead link? Post an issue on or pull request the [wiki](https://github.com/ZackeryRSmith/GMLWiki)! If you're feeling especially stuck right now, head over to the [Discord](https://discord.gg/J5AvdFK4mw)."},{"location":"_coverpage/","title":"Godot Mod Loader","text":""},{"location":"_coverpage/#godot-mod-loader","title":"Godot Mod Loader","text":"<p>A generalized Mod Loader for GDScript-based Godot games.</p> <p>Discord Get Started</p>"},{"location":"_todo/","title":"todo","text":"# Under Construction This page is still being worked on! If you're feeling especially stuck right now, head over to the [Discord](https://discord.gg/J5AvdFK4mw)."},{"location":"api/mod_loader_api/","title":"ModLoader API","text":""},{"location":"api/mod_loader_api/#mod-developers","title":"Mod Developers","text":"<ul> <li> <p> <code>ModLoaderMod</code></p> <p>Helper functions to build mods. These are the main methods your mods will use.</p> <p> Reference</p> </li> <li> <p> <code>ModLoaderLog</code></p> <p>Methods for logging, to debug your scripts and for retrieving logged data.</p> <p> Reference</p> </li> <li> <p> <code>ModLoaderHookChain</code></p> <p>You'll use this when creating Script Hooks</p> <p> Reference</p> </li> <li> <p> <code>ModLoaderConfig</code></p> <p>Create settings for players to customize your mod.</p> <p> Reference</p> </li> <li> <p> <code>ModLoaderDeprecated</code></p> <p>Methods for deprecating methods. Can be used by mods with public APIs.</p> <p> Reference</p> </li> </ul>"},{"location":"api/mod_loader_api/#game-developers-integrators","title":"Game Developers/ Integrators","text":"<ul> <li> <p> <code>ModLoaderUserProfile</code></p> <p>Managing mod lists, enabling</p> <p> Reference</p> </li> </ul>"},{"location":"api/mod_loader_config/","title":"ModLoaderConfig","text":"<p>Inherits: Object</p> <p>Class for managing per-mod configurations.</p>"},{"location":"api/mod_loader_config/#constants","title":"Constants","text":""},{"location":"api/mod_loader_config/#constant-LOG_NAME","title":"\u2022 <code>LOG_NAME</code>: <code>\"ModLoader:Config\"</code>","text":""},{"location":"api/mod_loader_config/#constant-DEFAULT_CONFIG_NAME","title":"\u2022 <code>DEFAULT_CONFIG_NAME</code>: <code>\"default\"</code>","text":""},{"location":"api/mod_loader_config/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_config/#method-create_config","title":"\u2022 <code>ModConfig</code> <code>create_config(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>config_name:</code> <code>String</code><code>,</code> <code>config_data:</code> <code>Dictionary</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description","title":"Description:","text":"<p>Creates a new configuration for a mod.</p>"},{"location":"api/mod_loader_config/#parameters","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.  </li> <li><code>config_name</code> (<code>String</code>): The name of the configuration.  </li> <li><code>config_data</code> (<code>Dictionary</code>): The configuration data to be stored.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The created <code>ModConfig</code> object if successful, or null otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-update_config","title":"\u2022 <code>ModConfig</code> <code>update_config(</code> <code>config:</code> <code>ModConfig</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_1","title":"Description:","text":"<p>Updates an existing <code>ModConfig</code> object with new data and saves the config file.</p>"},{"location":"api/mod_loader_config/#parameters_1","title":"Parameters:","text":"<ul> <li><code>config</code> (<code>ModConfig</code>): The <code>ModConfig</code> object to be updated.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The updated <code>ModConfig</code> object if successful, or null otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-delete_config","title":"\u2022 <code>bool</code> <code>delete_config(</code> <code>config:</code> <code>ModConfig</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_2","title":"Description:","text":"<p>Deletes a <code>ModConfig</code> object and performs cleanup operations.</p>"},{"location":"api/mod_loader_config/#parameters_2","title":"Parameters:","text":"<ul> <li><code>config</code> (<code>ModConfig</code>): The <code>ModConfig</code> object to be deleted.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True if the deletion was successful, False otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-set_current_config","title":"\u2022 <code>void</code> <code>set_current_config(</code> <code>config:</code> <code>ModConfig</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_3","title":"Description:","text":"<p>Sets the current configuration of a mod to the specified configuration.</p>"},{"location":"api/mod_loader_config/#parameters_3","title":"Parameters:","text":"<ul> <li><code>config</code> (<code>ModConfig</code>): The <code>ModConfig</code> object to be set as current config.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_config_schema","title":"\u2022 <code>Dictionary</code> <code>get_config_schema(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_4","title":"Description:","text":"<p>Returns the schema for the specified mod id.</p>"},{"location":"api/mod_loader_config/#parameters_4","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li>A dictionary representing the schema for the mod's configuration file.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_schema_for_prop","title":"\u2022 <code>Dictionary</code> <code>get_schema_for_prop(</code> <code>config:</code> <code>ModConfig</code><code>,</code> <code>prop:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_5","title":"Description:","text":"<p>Retrieves the schema for a specific property key.</p>"},{"location":"api/mod_loader_config/#parameters_5","title":"Parameters:","text":"<ul> <li><code>config</code> (<code>ModConfig</code>): The <code>ModConfig</code> object from which to retrieve the schema.  </li> <li><code>prop</code> (<code>String</code>): The property key for which to retrieve the schema.</li> </ul> <p>Returns:</p> <ul> <li><code>Dictionary</code>: The schema dictionary for the specified property.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_mods_with_config","title":"\u2022 <code>Array</code> <code>get_mods_with_config(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_6","title":"Description:","text":"<p>Retrieves an Array of mods that have configuration files.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An Array containing the mod data of mods that have configuration files.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_configs","title":"\u2022 <code>Dictionary</code> <code>get_configs(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_7","title":"Description:","text":"<p>Retrieves the configurations dictionary for a given mod ID.</p>"},{"location":"api/mod_loader_config/#parameters_6","title":"Parameters:","text":"<ul> <li><code>mod_id</code>: The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>Dictionary</code>: A dictionary containing the configurations for the specified mod. If the mod ID is invalid or no configurations are found, an empty dictionary is returned.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_config","title":"\u2022 <code>ModConfig</code> <code>get_config(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>config_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_8","title":"Description:","text":"<p>Retrieves the configuration for a specific mod and configuration name.</p>"},{"location":"api/mod_loader_config/#parameters_7","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.  </li> <li><code>config_name</code> (<code>String</code>): The name of the configuration.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The configuration as a <code>ModConfig</code> object or null if not found.</li> </ul>"},{"location":"api/mod_loader_config/#method-has_current_config","title":"\u2022 <code>bool</code> <code>has_current_config(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_9","title":"Description:","text":"<p>Checks whether a mod has a current configuration set.</p>"},{"location":"api/mod_loader_config/#parameters_8","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True if the mod has a current configuration, false otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-has_config","title":"\u2022 <code>bool</code> <code>has_config(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>config_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_10","title":"Description:","text":"<p>Checks whether a mod has a configuration with the specified name.</p>"},{"location":"api/mod_loader_config/#parameters_9","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.  </li> <li><code>config_name</code> (<code>String</code>): The name of the configuration.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True if the mod has a configuration with the specified name, False otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_default_config","title":"\u2022 <code>ModConfig</code> <code>get_default_config(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_11","title":"Description:","text":"<p>Retrieves the default configuration for a specified mod ID.</p>"},{"location":"api/mod_loader_config/#parameters_10","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The <code>ModConfig</code> object representing the default configuration for the specified mod. If the mod ID is invalid or no configuration is found, returns null.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_current_config","title":"\u2022 <code>ModConfig</code> <code>get_current_config(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_12","title":"Description:","text":"<p>Retrieves the currently active configuration for a specific mod.</p>"},{"location":"api/mod_loader_config/#parameters_11","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The configuration as a <code>ModConfig</code> object or <code>null</code> if not found.</li> </ul>"},{"location":"api/mod_loader_config/#method-get_current_config_name","title":"\u2022 <code>String</code> <code>get_current_config_name(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_13","title":"Description:","text":"<p>Retrieves the name of the current configuration for a specific mod.</p>"},{"location":"api/mod_loader_config/#parameters_12","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>String</code> The currently active configuration name for the given mod id or an empty string if not found.</li> </ul>"},{"location":"api/mod_loader_config/#method-refresh_config_data","title":"\u2022 <code>ModConfig</code> <code>refresh_config_data(</code> <code>config:</code> <code>ModConfig</code><code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_14","title":"Description:","text":"<p>Refreshes the data of the provided configuration by reloading it from the config file.</p>"},{"location":"api/mod_loader_config/#parameters_13","title":"Parameters:","text":"<ul> <li><code>config</code> (<code>ModConfig</code>): The <code>ModConfig</code> object whose data needs to be refreshed.</li> </ul> <p>Returns:</p> <ul> <li><code>ModConfig</code>: The <code>ModConfig</code> object with refreshed data if successful, or the original object otherwise.</li> </ul>"},{"location":"api/mod_loader_config/#method-refresh_current_configs","title":"\u2022 <code>void</code> <code>refresh_current_configs(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_config/#description_15","title":"Description:","text":"<p>Iterates over all mods to refresh the data of their current configurations, if available.</p> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>Compares the previous configuration data with the refreshed data and emits the [signal ModLoader.current_config_changed] signal if changes are detected. This function ensures that any changes made to the configuration files outside the application are reflected within the application's runtime, allowing for dynamic updates without the need for a restart.</p>"},{"location":"api/mod_loader_deprecated/","title":"ModLoaderDeprecated","text":"<p>Inherits: Object</p> <p>API methods for deprecating funcs. Can be used by mods with public APIs.</p>"},{"location":"api/mod_loader_deprecated/#constants","title":"Constants","text":""},{"location":"api/mod_loader_deprecated/#constant-LOG_NAME","title":"\u2022 <code>LOG_NAME</code>: <code>\"ModLoader:Deprecated\"</code>","text":""},{"location":"api/mod_loader_deprecated/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_deprecated/#method-deprecated_changed","title":"\u2022 <code>void</code> <code>deprecated_changed(</code> <code>old_method:</code> <code>String</code><code>,</code> <code>new_method:</code> <code>String</code><code>,</code> <code>since_version:</code> <code>String</code><code>,</code> <code>show_removal_note:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_deprecated/#description","title":"Description:","text":"<p>Marks a method that has changed its name or class.</p>"},{"location":"api/mod_loader_deprecated/#parameters","title":"Parameters:","text":"<ul> <li><code>old_method</code> (<code>String</code>): The name of the deprecated method.  </li> <li><code>new_method</code> (<code>String</code>): The name of the new method to use.  </li> <li><code>since_version</code> (<code>String</code>): The version number from which the method has been deprecated.  </li> <li><code>show_removal_note</code> (<code>bool</code>): (optional) If true, includes a note about future removal of the old method. Default is true.</li> </ul> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_deprecated/#method-deprecated_removed","title":"\u2022 <code>void</code> <code>deprecated_removed(</code> <code>old_method:</code> <code>String</code><code>,</code> <code>since_version:</code> <code>String</code><code>,</code> <code>show_removal_note:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_deprecated/#description_1","title":"Description:","text":"<p>Marks a method that has been entirely removed, with no replacement.</p>"},{"location":"api/mod_loader_deprecated/#parameters_1","title":"Parameters:","text":"<ul> <li><code>old_method</code> (<code>String</code>): The name of the removed method.  </li> <li><code>since_version</code> (<code>String</code>): The version number from which the method has been deprecated.  </li> <li><code>show_removal_note</code> (<code>bool</code>): (optional) If true, includes a note about future removal of the old method. Default is true.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>Note</p> <p>This should rarely be needed but is included for completeness.</p>"},{"location":"api/mod_loader_deprecated/#method-deprecated_message","title":"\u2022 <code>void</code> <code>deprecated_message(</code> <code>msg:</code> <code>String</code><code>,</code> <code>since_version:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_deprecated/#description_2","title":"Description:","text":"<p>Marks a method with a freeform deprecation message.</p>"},{"location":"api/mod_loader_deprecated/#parameters_2","title":"Parameters:","text":"<ul> <li><code>msg</code> (<code>String</code>): The deprecation message.  </li> <li><code>since_version</code> (<code>String</code>): (optional) The version number from which the deprecation applies.</li> </ul> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_hook_chain/","title":"ModLoaderHookChain","text":"<p>Inherits: RefCounted</p> <p>Small class to keep the state of hook execution chains and move between mod hook calls. For examples, see <code>ModLoaderMod.add_hook()</code>.</p>"},{"location":"api/mod_loader_hook_chain/#constants","title":"Constants","text":""},{"location":"api/mod_loader_hook_chain/#constant-LOG_NAME","title":"\u2022 <code>LOG_NAME</code>: <code>\"ModLoaderHookChain\"</code>","text":""},{"location":"api/mod_loader_hook_chain/#properties","title":"Properties","text":""},{"location":"api/mod_loader_hook_chain/#property-reference_object","title":"\u2022 <code>reference_object</code>","text":""},{"location":"api/mod_loader_hook_chain/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_hook_chain/#method-execute_next","title":"\u2022 <code>Variant</code> <code>execute_next(</code> <code>args:</code> <code>Array</code><code>)</code>","text":""},{"location":"api/mod_loader_hook_chain/#description","title":"Description:","text":"<p>Will execute the next mod hook callable or vanilla method and return the result.</p>"},{"location":"api/mod_loader_hook_chain/#parameters","title":"Parameters:","text":"<ul> <li><code>args</code> (<code>Array</code>): An array of all arguments passed into the vanilla function. </li> </ul> <p>Returns:</p> <ul> <li><code>Variant</code>: Return value of the next function in the chain.</li> </ul> <p>Make sure to call this method once somewhere in the <code>mod_callable</code> you pass to <code>ModLoaderMod.add_hook()</code>.   </p>"},{"location":"api/mod_loader_hook_chain/#method-execute_next_async","title":"\u2022 <code>Variant</code> <code>execute_next_async(</code> <code>args:</code> <code>Array</code><code>)</code>","text":""},{"location":"api/mod_loader_hook_chain/#description_1","title":"Description:","text":"<p>Same as <code>execute_next()</code>, but asynchronous - it can be used if a method uses <code>await</code>. </p>"},{"location":"api/mod_loader_hook_chain/#parameters_1","title":"Parameters:","text":"<ul> <li><code>args</code> (<code>Array</code>): An array of all arguments passed into the vanilla function. </li> </ul> <p>Returns:</p> <ul> <li><code>Variant</code>: Return value of the next function in the chain.</li> </ul> <p>This hook needs to be used if the vanilla method uses <code>await</code> somewhere.  Make sure to call this method once somewhere in the <code>mod_callable</code> you pass to <code>ModLoaderMod.add_hook()</code>.   </p>"},{"location":"api/mod_loader_log/","title":"ModLoaderLog","text":"<p>Inherits: Object</p> <p>This Class provides methods for logging, retrieving logged data, and internal methods for working with log files.</p>"},{"location":"api/mod_loader_log/#constants","title":"Constants","text":""},{"location":"api/mod_loader_log/#constant-MOD_LOG_PATH","title":"\u2022 <code>MOD_LOG_PATH</code>: <code>\"user://logs/modloader.log\"</code>","text":""},{"location":"api/mod_loader_log/#constant-ERROR","title":"\u2022 <code>ERROR</code>: <code>0</code>","text":""},{"location":"api/mod_loader_log/#constant-WARNING","title":"\u2022 <code>WARNING</code>: <code>1</code>","text":""},{"location":"api/mod_loader_log/#constant-INFO","title":"\u2022 <code>INFO</code>: <code>2</code>","text":""},{"location":"api/mod_loader_log/#constant-DEBUG","title":"\u2022 <code>DEBUG</code>: <code>3</code>","text":""},{"location":"api/mod_loader_log/#properties","title":"Properties","text":""},{"location":"api/mod_loader_log/#property-logged_messages","title":"\u2022 <code>logged_messages</code>","text":""},{"location":"api/mod_loader_log/#property-verbosity","title":"\u2022 <code>verbosity</code>","text":""},{"location":"api/mod_loader_log/#property-ignored_mods","title":"\u2022 <code>ignored_mods</code>","text":""},{"location":"api/mod_loader_log/#property-hint_color","title":"\u2022 <code>hint_color</code>","text":""},{"location":"api/mod_loader_log/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_log/#method-fatal","title":"\u2022 <code>void</code> <code>fatal(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description","title":"Description:","text":"<p>Logs the error in red and a stack trace. Prefixed FATAL-ERROR. Always logged.</p>"},{"location":"api/mod_loader_log/#parameters","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as an error. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>Breakpoint</p> <p>Stops execution in the editor, use this when something really needs to be fixed.</p>"},{"location":"api/mod_loader_log/#method-error","title":"\u2022 <code>void</code> <code>error(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_1","title":"Description:","text":"<p>Logs the message and pushes an error. Prefixed ERROR. Always logged.</p>"},{"location":"api/mod_loader_log/#parameters_1","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as an error. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-warning","title":"\u2022 <code>void</code> <code>warning(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_2","title":"Description:","text":"<p>Logs the message and pushes a warning. Prefixed WARNING. Logged with verbosity level at or above warning (<code>-v</code> or <code>--log-warning</code>).</p>"},{"location":"api/mod_loader_log/#parameters_2","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as a warning. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-info","title":"\u2022 <code>void</code> <code>info(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_3","title":"Description:","text":"<p>Logs the message. Prefixed INFO. Logged with verbosity level at or above info (<code>-vv</code> or <code>--log-info</code>).</p>"},{"location":"api/mod_loader_log/#parameters_3","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as an information. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-success","title":"\u2022 <code>void</code> <code>success(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_4","title":"Description:","text":"<p>Logs the message. Prefixed SUCCESS. Logged with verbosity level at or above info (<code>-vv</code> or <code>--log-info</code>).</p>"},{"location":"api/mod_loader_log/#parameters_4","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as a success. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-debug","title":"\u2022 <code>void</code> <code>debug(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_5","title":"Description:","text":"<p>Logs the message. Prefixed DEBUG. Logged with verbosity level at or above debug (<code>-vvv</code> or <code>--log-debug</code>).</p>"},{"location":"api/mod_loader_log/#parameters_5","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as a debug. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-hint","title":"\u2022 <code>void</code> <code>hint(</code> <code>message:</code> <code>String</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_6","title":"Description:","text":"<p>Logs the message. Prefixed HINT and highligted. Logged with verbosity level at or above debug (<code>-vvv</code> or <code>--log-debug</code>) and in the editor only. Not written to mod loader log.  </p> <p>Note</p> <p>Use this to help other developers debug issues by giving them error-specific hints.</p>"},{"location":"api/mod_loader_log/#parameters_6","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as a debug. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-debug_json_print","title":"\u2022 <code>void</code> <code>debug_json_print(</code> <code>message:</code> <code>String</code><code>,</code> <code>json_printable:</code> <code>Variant</code><code>,</code> <code>mod_name:</code> <code>String</code><code>,</code> <code>only_once:</code> <code>bool</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_7","title":"Description:","text":"<p>Logs the message formatted with <code>JSON.print()</code>. Prefixed DEBUG. Logged with verbosity level at or above debug (<code>-vvv</code> or <code>--log-debug</code>).</p>"},{"location":"api/mod_loader_log/#parameters_7","title":"Parameters:","text":"<p><code>message</code> (<code>String</code>): The message to be logged as a debug. <code>json_printable</code> (Variant): The variable to be formatted and printed using <code>JSON.print()</code>. <code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with this log entry. <code>only_once</code> (<code>bool</code>): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p> <p>Returns:</p> <ul> <li>No return value  </li> </ul>"},{"location":"api/mod_loader_log/#method-get_all_as_resource","title":"\u2022 <code>Array</code> <code>get_all_as_resource(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_8","title":"Description:","text":"<p>Returns an array of log entries as a resource.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as resource.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_all_as_string","title":"\u2022 <code>Array</code> <code>get_all_as_string(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_9","title":"Description:","text":"<p>Returns an array of log entries as a string.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as strings.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_mod_as_resource","title":"\u2022 <code>Array</code> <code>get_by_mod_as_resource(</code> <code>mod_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_10","title":"Description:","text":"<p>Returns an array of log entries as a resource for a specific mod_name.</p>"},{"location":"api/mod_loader_log/#parameters_8","title":"Parameters:","text":"<p><code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as resource for the specified <code>mod_name</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_mod_as_string","title":"\u2022 <code>Array</code> <code>get_by_mod_as_string(</code> <code>mod_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_11","title":"Description:","text":"<p>Returns an array of log entries as a string for a specific mod_name.</p>"},{"location":"api/mod_loader_log/#parameters_9","title":"Parameters:","text":"<p><code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as strings for the specified <code>mod_name</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_type_as_resource","title":"\u2022 <code>Array</code> <code>get_by_type_as_resource(</code> <code>type:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_12","title":"Description:","text":"<p>Returns an array of log entries as a resource for a specific type.</p>"},{"location":"api/mod_loader_log/#parameters_10","title":"Parameters:","text":"<p><code>type</code> (<code>String</code>): The log type associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as resource for the specified <code>type</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_type_as_string","title":"\u2022 <code>Array</code> <code>get_by_type_as_string(</code> <code>type:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_13","title":"Description:","text":"<p>Returns an array of log entries as a string for a specific type.</p>"},{"location":"api/mod_loader_log/#parameters_11","title":"Parameters:","text":"<p><code>type</code> (<code>String</code>): The log type associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as strings for the specified <code>type</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_all","title":"\u2022 <code>Array</code> <code>get_all(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_14","title":"Description:","text":"<p>Returns an array of all log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of all log entries.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_mod","title":"\u2022 <code>Array</code> <code>get_by_mod(</code> <code>mod_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_15","title":"Description:","text":"<p>Returns an array of log entries for a specific mod_name.</p>"},{"location":"api/mod_loader_log/#parameters_12","title":"Parameters:","text":"<p><code>mod_name</code> (<code>String</code>): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries for the specified <code>mod_name</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_by_type","title":"\u2022 <code>Array</code> <code>get_by_type(</code> <code>type:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_16","title":"Description:","text":"<p>Returns an array of log entries for a specific type.</p>"},{"location":"api/mod_loader_log/#parameters_13","title":"Parameters:","text":"<p><code>type</code> (<code>String</code>): The log type associated with the log entries.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries for the specified <code>type</code>.</li> </ul>"},{"location":"api/mod_loader_log/#method-get_all_entries_as_string","title":"\u2022 <code>Array</code> <code>get_all_entries_as_string(</code> <code>log_entries:</code> <code>Array</code><code>) static</code>","text":""},{"location":"api/mod_loader_log/#description_17","title":"Description:","text":"<p>Returns an array of log entries represented as strings.</p>"},{"location":"api/mod_loader_log/#parameters_14","title":"Parameters:","text":"<p><code>log_entries</code> (<code>Array</code>): An array of ModLoaderLogEntry Objects.</p> <p>Returns:</p> <ul> <li><code>Array</code>: An array of log entries represented as strings.</li> </ul>"},{"location":"api/mod_loader_log_compare/","title":"ModLoaderLog.ModLoaderLogCompare","text":"<p>Inherits: RefCounted</p>"},{"location":"api/mod_loader_log_compare/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_log_compare/#method-time","title":"\u2022 <code>bool</code> <code>time(</code> <code>a:</code> <code>ModLoaderLog.ModLoaderLogEntry</code><code>,</code> <code>b:</code> <code>ModLoaderLog.ModLoaderLogEntry</code><code>) static</code>","text":""},{"location":"api/mod_loader_log_entry/","title":"ModLoaderLog.ModLoaderLogEntry","text":"<p>Inherits: Resource</p> <p>This Sub-Class represents a log entry in ModLoader.</p>"},{"location":"api/mod_loader_log_entry/#properties","title":"Properties","text":""},{"location":"api/mod_loader_log_entry/#property-mod_name","title":"\u2022 <code>mod_name</code>","text":""},{"location":"api/mod_loader_log_entry/#property-message","title":"\u2022 <code>message</code>","text":""},{"location":"api/mod_loader_log_entry/#property-type","title":"\u2022 <code>type</code>","text":""},{"location":"api/mod_loader_log_entry/#property-time","title":"\u2022 <code>time</code>","text":""},{"location":"api/mod_loader_log_entry/#property-time_stamp","title":"\u2022 <code>time_stamp</code>","text":""},{"location":"api/mod_loader_log_entry/#property-stack","title":"\u2022 <code>stack</code>","text":""},{"location":"api/mod_loader_log_entry/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_log_entry/#method-get_entry","title":"\u2022 <code>String</code> <code>get_entry(</code> <code>)</code>","text":""},{"location":"api/mod_loader_log_entry/#description","title":"Description:","text":"<p>Get the log entry as a formatted string.</p> <p>Returns: <code>String</code></p>"},{"location":"api/mod_loader_log_entry/#method-get_prefix","title":"\u2022 <code>String</code> <code>get_prefix(</code> <code>)</code>","text":""},{"location":"api/mod_loader_log_entry/#description_1","title":"Description:","text":"<p>Get the prefix string for the log entry, including the log type and mod name.</p> <p>Returns: <code>String</code></p>"},{"location":"api/mod_loader_log_entry/#method-get_md5","title":"\u2022 <code>String</code> <code>get_md5(</code> <code>)</code>","text":""},{"location":"api/mod_loader_log_entry/#description_2","title":"Description:","text":"<p>Generate an MD5 hash of the log entry (prefix + message).</p> <p>Returns: <code>String</code></p>"},{"location":"api/mod_loader_log_entry/#method-get_all_entries","title":"\u2022 <code>Array</code> <code>get_all_entries(</code> <code>)</code>","text":""},{"location":"api/mod_loader_log_entry/#description_3","title":"Description:","text":"<p>Get all log entries, including the current entry and entries in the stack.</p> <p>Returns: <code>Array</code></p>"},{"location":"api/mod_loader_mod/","title":"ModLoaderMod","text":"<p>Inherits: Object</p> <p>This Class provides helper functions to build mods.</p>"},{"location":"api/mod_loader_mod/#constants","title":"Constants","text":""},{"location":"api/mod_loader_mod/#constant-LOG_NAME","title":"\u2022 <code>LOG_NAME</code>: <code>\"ModLoader:Mod\"</code>","text":""},{"location":"api/mod_loader_mod/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_mod/#method-install_script_extension","title":"\u2022 <code>void</code> <code>install_script_extension(</code> <code>child_script_path:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description","title":"Description:","text":"<p>Installs a script extension that extends a vanilla script.</p>"},{"location":"api/mod_loader_mod/#parameters","title":"Parameters:","text":"<ul> <li><code>child_script_path</code> (<code>String</code>): The path to the mod's extender script.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>This is the preferred way of modifying a vanilla <code>Script</code> Since Godot 4, extensions can cause issues with scripts that use <code>class_name</code> and should be avoided if present. See <code>add_hook()</code> for those cases.</p> <p>The <code>child_script_path</code> should point to your mod's extender script. Example: <code>\"MOD/extensions/singletons/utils.gd\"</code> Inside the extender script, include <code>extends {target}</code> where <code>{target}</code> is the vanilla path. Example: <code>extends \"res://singletons/utils.gd\"</code>.  </p> <p>Note</p> <p>Your extender script doesn't have to follow the same directory path as the vanilla file, but it's good practice to do so.</p>"},{"location":"api/mod_loader_mod/#method-install_script_hooks","title":"\u2022 <code>void</code> <code>install_script_hooks(</code> <code>vanilla_script_path:</code> <code>String</code><code>,</code> <code>hook_script_path:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_1","title":"Description:","text":"<p>Adds all methods from a file as hooks. </p>"},{"location":"api/mod_loader_mod/#parameters_1","title":"Parameters:","text":"<ul> <li><code>vanilla_script_path</code> (<code>String</code>): The path to the script which will be hooked.  </li> <li><code>hook_script_path</code> (<code>String</code>): The path to the script containing hooks.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>The file needs to extend <code>Object</code>. The methods in the file need to have the exact same name as the vanilla method they intend to hook, all mismatches will be ignored.  See: <code>add_hook()</code> </p>"},{"location":"api/mod_loader_mod/#examples","title":"Examples:","text":"GDScript<pre><code>ModLoaderMod.install_script_hooks(\n    \"res://tools/utilities.gd\",\n    extensions_dir_path.path_join(\"tools/utilities-hook.gd\")\n)\n</code></pre>"},{"location":"api/mod_loader_mod/#method-add_hook","title":"\u2022 <code>void</code> <code>add_hook(</code> <code>mod_callable:</code> <code>Callable</code><code>,</code> <code>script_path:</code> <code>String</code><code>,</code> <code>method_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_2","title":"Description:","text":"<p>Adds a hook, a custom mod function, to a vanilla method.</p>"},{"location":"api/mod_loader_mod/#parameters_2","title":"Parameters:","text":"<ul> <li><code>mod_callable</code> (<code>Callable</code>): The function that will executed when the vanilla method is executed. When writing a mod callable, make sure that it always receives a <code>ModLoaderHookChain</code> object as first argument, which is used to continue down the hook chain (see: <code>ModLoaderHookChain.execute_next()</code>) and allows manipulating parameters before and return values after the vanilla method is called.   </li> <li><code>script_path</code> (<code>String</code>): Path to the vanilla script that holds the method.  </li> <li><code>method_name</code> (<code>String</code>): The method the hook will be applied to.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>Opposed to script extensions, hooks can be applied to scripts that use <code>class_name</code> without issues. If possible, prefer <code>install_script_extension()</code>.</p>"},{"location":"api/mod_loader_mod/#examples_1","title":"Examples:","text":"<p>Given the following vanilla script <code>main.gd</code> GDScript<pre><code>class_name MainGame\nextends Node2D\n\nvar version := \"vanilla 1.0.0\"\n\n\nfunc _ready():\n    $CanvasLayer/Control/Label.text = \"Version: %s\" % version\n    print(Utilities.format_date(15, 11, 2024))\n</code></pre>  It can be hooked in <code>mod_main.gd</code> like this GDScript<pre><code>func _init() -&gt; void:\n    ModLoaderMod.add_hook(change_version, \"res://main.gd\", \"_ready\")\n    ModLoaderMod.add_hook(time_travel, \"res://tools/utilities.gd\", \"format_date\")\n    # Multiple hooks can be added to a single method.\n    ModLoaderMod.add_hook(add_season, \"res://tools/utilities.gd\", \"format_date\")\n\n\n# The script we are hooking is attached to a node, which we can get from reference_object\n# then we can change any variables it has\nfunc change_version(chain: ModLoaderHookChain) -&gt; void:\n    # Using a typecast here (with \"as\") can help with autocomplete and avoiding errors\n    var main_node := chain.reference_object as MainGame\n    main_node.version = \"Modloader Hooked!\"\n    # _ready, which we are hooking, does not have any arguments\n    chain.execute_next()\n\n\n# Parameters can be manipulated easily by changing what is passed into .execute_next()\n# The vanilla method (Utilities.format_date) takes 3 arguments, our hook method takes\n# the ModLoaderHookChain followed by the same 3\nfunc time_travel(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:\n    print(\"time travel!\")\n    year -= 100\n    # Just the vanilla arguments are passed along in the same order, wrapped into an Array\n    var val = chain.execute_next([day, month, year])\n    return val\n\n\n# The return value can be manipulated by calling the next hook (or vanilla) first\n# then changing it and returning the new value.\nfunc add_season(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:\n    var output = chain.execute_next([day, month, year])\n    match month:\n        12, 1, 2:\n            output += \", Winter\"\n        3, 4, 5:\n            output += \", Spring\"\n        6, 7, 8:\n            output += \", Summer\"\n        9, 10, 11:\n            output += \", Autumn\"\n    return output\n</code></pre></p>"},{"location":"api/mod_loader_mod/#method-register_global_classes_from_array","title":"\u2022 <code>void</code> <code>register_global_classes_from_array(</code> <code>new_global_classes:</code> <code>Array</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_3","title":"Description:","text":"<p>Registers an array of classes to the global scope since Godot only does that in the editor.</p>"},{"location":"api/mod_loader_mod/#parameters_3","title":"Parameters:","text":"<ul> <li><code>new_global_classes</code> (<code>Array</code>): An array of class definitions to be registered.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>Format: <code>{ \"base\": \"ParentClass\", \"class\": \"ClassName\", \"language\": \"GDScript\", \"path\": \"res://path/class_name.gd\" }</code></p> <p>Tip</p> <p>You can find these easily in the project.godot file under <code>_global_script_classes</code> (but you should only include classes belonging to your mod)</p>"},{"location":"api/mod_loader_mod/#method-add_translation","title":"\u2022 <code>void</code> <code>add_translation(</code> <code>resource_path:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_4","title":"Description:","text":"<p>Adds a translation file.</p>"},{"location":"api/mod_loader_mod/#parameters_4","title":"Parameters:","text":"<ul> <li> <p><code>resource_path</code> (<code>String</code>): The path to the translation resource file. Returns:</p> </li> <li> <p>No return value</p> </li> </ul> <p>Note</p> <p>The <code>.translation</code> file should have been created by the Godot editor already, usually when importing a CSV file. The translation file should named <code>name.langcode.translation</code> -&gt; <code>mytranslation.en.translation</code>.</p>"},{"location":"api/mod_loader_mod/#method-refresh_scene","title":"\u2022 <code>void</code> <code>refresh_scene(</code> <code>scene_path:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_5","title":"Description:","text":"<p>Marks the given scene for to be refreshed. It will be refreshed at the correct point in time later.</p>"},{"location":"api/mod_loader_mod/#parameters_5","title":"Parameters:","text":"<ul> <li> <p><code>scene_path</code> (<code>String</code>): The path to the scene file to be refreshed.  Returns:</p> </li> <li> <p>No return value</p> </li> </ul> <p>Version</p> <p>This function requires Godot 4.3 or higher.</p> <p>This function is useful if a script extension is not automatically applied. This situation can occur when a script is attached to a preloaded scene. If you encounter issues where your script extension is not working as expected, try to identify the scene to which it is attached and use this method to refresh it. This will reload already loaded scenes and apply the script extension.   </p>"},{"location":"api/mod_loader_mod/#method-extend_scene","title":"\u2022 <code>void</code> <code>extend_scene(</code> <code>scene_vanilla_path:</code> <code>String</code><code>,</code> <code>edit_callable:</code> <code>Callable</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_6","title":"Description:","text":"<p>Extends a specific scene by providing a callable function to modify it.   </p>"},{"location":"api/mod_loader_mod/#parameters_6","title":"Parameters:","text":"<ul> <li><code>scene_vanilla_path</code> (<code>String</code>): The path to the vanilla scene file.  </li> <li><code>edit_callable</code> (<code>Callable</code>): The callable function to modify the scene.</li> </ul> <p>Returns:</p> <ul> <li>No return value</li> </ul> <p>The callable receives an instance of the \"vanilla_scene\" as the first parameter.  </p>"},{"location":"api/mod_loader_mod/#method-get_mod_data","title":"\u2022 <code>ModData</code> <code>get_mod_data(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_7","title":"Description:","text":"<p>Gets the <code>ModData</code> from the provided namespace.</p>"},{"location":"api/mod_loader_mod/#parameters_7","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>ModData</code>: The <code>ModData</code> associated with the provided <code>mod_id</code>, or null if the <code>mod_id</code> is invalid.  </li> </ul>"},{"location":"api/mod_loader_mod/#method-get_mod_data_all","title":"\u2022 <code>Dictionary</code> <code>get_mod_data_all(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_8","title":"Description:","text":"<p>Gets the <code>ModData</code> of all loaded Mods as <code>Dictionary</code>.</p> <p>Returns:</p> <ul> <li><code>Dictionary</code>: A dictionary containing the <code>ModData</code> of all loaded mods.  </li> </ul>"},{"location":"api/mod_loader_mod/#method-get_unpacked_dir","title":"\u2022 <code>String</code> <code>get_unpacked_dir(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_9","title":"Description:","text":"<p>Returns the path to the directory where unpacked mods are stored.</p> <p>Returns:</p> <ul> <li><code>String</code>: The path to the unpacked mods directory.  </li> </ul>"},{"location":"api/mod_loader_mod/#method-is_mod_loaded","title":"\u2022 <code>bool</code> <code>is_mod_loaded(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_10","title":"Description:","text":"<p>Returns true if the mod with the given <code>mod_id</code> was successfully loaded.</p>"},{"location":"api/mod_loader_mod/#parameters_8","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: true if the mod is loaded, false otherwise.  </li> </ul>"},{"location":"api/mod_loader_mod/#method-is_mod_active","title":"\u2022 <code>bool</code> <code>is_mod_active(</code> <code>mod_id:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_mod/#description_11","title":"Description:","text":"<p>Returns true if the mod with the given mod_id was successfully loaded and is currently active.  Parameters: - <code>mod_id</code> (<code>String</code>): The ID of the mod.  Returns: - <code>bool</code>: true if the mod is loaded and active, false otherwise.</p>"},{"location":"api/mod_loader_user_profile/","title":"ModLoaderUserProfile","text":"<p>Inherits: Object</p> <p>This Class provides methods for working with user profiles.</p>"},{"location":"api/mod_loader_user_profile/#constants","title":"Constants","text":""},{"location":"api/mod_loader_user_profile/#constant-LOG_NAME","title":"\u2022 <code>LOG_NAME</code>: <code>\"ModLoader:UserProfile\"</code>","text":""},{"location":"api/mod_loader_user_profile/#constant-FILE_PATH_USER_PROFILES","title":"\u2022 <code>FILE_PATH_USER_PROFILES</code>: <code>\"user://mod_user_profiles.json\"</code>","text":""},{"location":"api/mod_loader_user_profile/#method-descriptions","title":"Method Descriptions","text":""},{"location":"api/mod_loader_user_profile/#method-enable_mod","title":"\u2022 <code>bool</code> <code>enable_mod(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description","title":"Description:","text":"<p>Enables a mod - it will be loaded on the next game start</p>"},{"location":"api/mod_loader_user_profile/#parameters","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod to enable.  </li> <li><code>user_profile</code> (<code>ModUserProfile</code>): (Optional) The user profile to enable the mod for. Default is the current user profile.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-force_enable_mod","title":"\u2022 <code>bool</code> <code>force_enable_mod(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_1","title":"Description:","text":"<p>Forces a mod to enable, ensuring it loads at the next game start, regardless of load warnings.</p>"},{"location":"api/mod_loader_user_profile/#parameters_1","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod to enable.  </li> <li><code>user_profile</code> (<code>ModUserProfile</code>): (Optional) The user profile for which the mod will be enabled. Defaults to the current user profile.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-disable_mod","title":"\u2022 <code>bool</code> <code>disable_mod(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_2","title":"Description:","text":"<p>Disables a mod - it will not be loaded on the next game start</p>"},{"location":"api/mod_loader_user_profile/#parameters_2","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod to disable.  </li> <li><code>user_profile</code> (<code>ModUserProfile</code>): (Optional) The user profile to disable the mod for. Default is the current user profile.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-set_mod_current_config","title":"\u2022 <code>bool</code> <code>set_mod_current_config(</code> <code>mod_id:</code> <code>String</code><code>,</code> <code>mod_config:</code> <code>ModConfig</code><code>,</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_3","title":"Description:","text":"<p>Sets the current config for a mod in a user profile's mod_list.</p>"},{"location":"api/mod_loader_user_profile/#parameters_3","title":"Parameters:","text":"<ul> <li><code>mod_id</code> (<code>String</code>): The ID of the mod.  </li> <li><code>mod_config</code> (<code>ModConfig</code>): The mod config to set as the current config.  </li> <li><code>user_profile</code> (<code>ModUserProfile</code>): (Optional) The user profile to update. Default is the current user profile.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-create_profile","title":"\u2022 <code>bool</code> <code>create_profile(</code> <code>profile_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_4","title":"Description:","text":"<p>Creates a new user profile with the given name, using the currently loaded mods as the mod list.</p>"},{"location":"api/mod_loader_user_profile/#parameters_4","title":"Parameters:","text":"<ul> <li><code>profile_name</code> (<code>String</code>): The name of the new user profile (must be unique).</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-set_profile","title":"\u2022 <code>bool</code> <code>set_profile(</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_5","title":"Description:","text":"<p>Sets the current user profile to the given user profile.</p>"},{"location":"api/mod_loader_user_profile/#parameters_5","title":"Parameters:","text":"<ul> <li><code>user_profile</code> (<code>ModUserProfile</code>): The user profile to set as the current profile.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-delete_profile","title":"\u2022 <code>bool</code> <code>delete_profile(</code> <code>user_profile:</code> <code>ModUserProfile</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_6","title":"Description:","text":"<p>Deletes the given user profile.</p>"},{"location":"api/mod_loader_user_profile/#parameters_6","title":"Parameters:","text":"<ul> <li><code>user_profile</code> (<code>ModUserProfile</code>): The user profile to delete.</li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>: True on success.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-get_current","title":"\u2022 <code>ModUserProfile</code> <code>get_current(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_7","title":"Description:","text":"<p>Returns the current user profile.</p> <p>Returns:</p> <ul> <li><code>ModUserProfile</code>: The current profile or <code>null</code> if not set.</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-get_profile","title":"\u2022 <code>ModUserProfile</code> <code>get_profile(</code> <code>profile_name:</code> <code>String</code><code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_8","title":"Description:","text":"<p>Returns the user profile with the given name.</p>"},{"location":"api/mod_loader_user_profile/#parameters_7","title":"Parameters:","text":"<ul> <li><code>profile_name</code> (<code>String</code>): The name of the user profile to retrieve.</li> </ul> <p>Returns:</p> <ul> <li><code>ModUserProfile</code>: The profile or <code>null</code> if not found</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-get_all_as_array","title":"\u2022 <code>Array</code> <code>get_all_as_array(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_9","title":"Description:","text":"<p>Returns an array containing all user profiles stored in ModLoaderStore.</p> <p>Returns:</p> <ul> <li><code>Array</code>: A list of <code>ModUserProfile</code> Objects</li> </ul>"},{"location":"api/mod_loader_user_profile/#method-is_initialized","title":"\u2022 <code>bool</code> <code>is_initialized(</code> <code>) static</code>","text":""},{"location":"api/mod_loader_user_profile/#description_10","title":"Description:","text":"<p>Returns true if the Mod User Profiles are initialized.  Returns:</p> <ul> <li><code>bool</code>: True if profiles are ready.  On the first execution of the game, user profiles might not yet be created. Use this method to check if everything is ready to interact with the ModLoaderUserProfile API.</li> </ul>"},{"location":"api/godot_3/mod_loader_config/","title":"ModLoaderConfig","text":"<p>This class provides functionality for working with per-mod Configurations.</p>"},{"location":"api/godot_3/mod_loader_config/#methods-overview","title":"Methods Overview","text":"Method Description <code>create_config</code> Creates a new configuration for a mod. <code>update_config</code> Updates an existing ModConfig object with new data and save the config file. <code>delete_config</code> Deletes a ModConfig object and performs cleanup operations. <code>set_current_config</code> Sets the current configuration of a mod to the specified configuration. <code>get_config_schema</code> Returns the schema for the specified mod id. If no configuration file exists for the mod, an empty dictionary is returned. <code>get_schema_for_prop</code> Retrieves the schema for a specific property key. <code>get_mods_with_config</code> Retrieves an Array of mods that have configuration files. <code>get_configs</code> Retrieves the configurations dictionary for a given mod ID. <code>get_config</code> Retrieves the configuration for a specific mod and configuration name. Returns the configuration as a ModConfig object or null if not found. <code>get_default_config</code> Retrieves the default configuration for a specified mod ID. <code>get_current_config</code> Retrieves the currently active configuration for a specific mod <code>get_current_config_name</code> Retrieves the name of the current configuration for a specific mod Returns an empty string if no configuration exists for the mod or the user profile has not been loaded"},{"location":"api/godot_3/mod_loader_config/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_config/#create_config","title":"create_config","text":"<p>GDScript<pre><code>func create_config(mod_id: String, config_name: String, config_data: Dictionary) -&gt; ModConfig\n</code></pre> Creates a new configuration for a mod.</p> <p>Parameters: - mod_id (String): The ID of the mod for which the configuration is being created. - config_name (String): The name of the configuration. - config_data (Dictionary): The configuration data to be stored in the new configuration.</p> <p>Returns: - ModConfig: The created ModConfig object if successful, or null otherwise.</p>"},{"location":"api/godot_3/mod_loader_config/#update_config","title":"update_config","text":"<p>GDScript<pre><code>func update_config(config: ModConfig) -&gt; ModConfig\n</code></pre> Updates an existing ModConfig object with new data and save the config file.</p> <p>Parameters: - config (ModConfig): The ModConfig object to be updated.</p> <p>Returns: - ModConfig: The updated ModConfig object if successful, or null otherwise.</p>"},{"location":"api/godot_3/mod_loader_config/#delete_config","title":"delete_config","text":"<p>GDScript<pre><code>func delete_config(config: ModConfig) -&gt; bool\n</code></pre> Deletes a ModConfig object and performs cleanup operations.</p> <p>Parameters: - config (ModConfig): The ModConfig object to be deleted.</p> <p>Returns: - bool: True if the deletion was successful, False otherwise.</p>"},{"location":"api/godot_3/mod_loader_config/#set_current_config","title":"set_current_config","text":"<p>GDScript<pre><code>func set_current_config(config: ModConfig) -&gt; void\n</code></pre> Sets the current configuration of a mod to the specified configuration.</p> <p>Parameters: - config (ModConfig): The ModConfig object to be set as current config.</p>"},{"location":"api/godot_3/mod_loader_config/#get_config_schema","title":"get_config_schema","text":"<p>GDScript<pre><code>func get_config_schema(mod_id: String) -&gt; Dictionary\n</code></pre> Returns the schema for the specified mod id. If no configuration file exists for the mod, an empty dictionary is returned.</p> <p>Parameters: - mod_id (String): the ID of the mod to get the configuration schema for</p> <p>Returns: - A dictionary representing the schema for the mod's configuration file</p>"},{"location":"api/godot_3/mod_loader_config/#get_schema_for_prop","title":"get_schema_for_prop","text":"<p>GDScript<pre><code>func get_schema_for_prop(config: ModConfig, prop: String) -&gt; Dictionary\n</code></pre> Retrieves the schema for a specific property key.</p> <p>Parameters: - config (ModConfig): The ModConfig object from which to retrieve the schema. - prop (String): The property key for which to retrieve the schema. e.g. <code>parentProp.childProp.nthChildProp</code> or <code>propKey</code></p> <p>Returns: - Dictionary: The schema dictionary for the specified property.</p>"},{"location":"api/godot_3/mod_loader_config/#get_mods_with_config","title":"get_mods_with_config","text":"<p>GDScript<pre><code>func get_mods_with_config() -&gt; Array\n</code></pre> Retrieves an Array of mods that have configuration files.</p> <p>Returns: - An Array containing the mod data of mods that have configuration files.</p>"},{"location":"api/godot_3/mod_loader_config/#get_configs","title":"get_configs","text":"<p>GDScript<pre><code>func get_configs(mod_id: String) -&gt; Dictionary\n</code></pre> Retrieves the configurations dictionary for a given mod ID.</p> <p>Parameters: - mod_id: The ID of the mod for which to retrieve the configurations.</p> <p>Returns: - A dictionary containing the configurations for the specified mod. If the mod ID is invalid or no configurations are found, an empty dictionary is returned.</p>"},{"location":"api/godot_3/mod_loader_config/#get_config","title":"get_config","text":"<p>GDScript<pre><code>func get_config(mod_id: String, config_name: String) -&gt; ModConfig\n</code></pre> Retrieves the configuration for a specific mod and configuration name. Returns the configuration as a ModConfig object or null if not found.</p> <p>Parameters: - mod_id (String): The ID of the mod to retrieve the configuration for. - config_name (String): The name of the configuration to retrieve.</p> <p>Returns: - The configuration as a ModConfig object or null if not found.</p>"},{"location":"api/godot_3/mod_loader_config/#get_default_config","title":"get_default_config","text":"<p>GDScript<pre><code>func get_default_config(mod_id: String) -&gt; ModConfig\n</code></pre> Retrieves the default configuration for a specified mod ID.</p> <p>Parameters: - mod_id: The ID of the mod for which to retrieve the default configuration.</p> <p>Returns: - The ModConfig object representing the default configuration for the specified mod. If the mod ID is invalid or no configuration is found, returns null.</p>"},{"location":"api/godot_3/mod_loader_config/#get_current_config","title":"get_current_config","text":"<p>GDScript<pre><code>func get_current_config(mod_id: String) -&gt; ModConfig\n</code></pre> Retrieves the currently active configuration for a specific mod</p> <p>Parameters: - mod_id (String): The ID of the mod to retrieve the configuration for.</p> <p>Returns: - The configuration as a ModConfig object or null if not found.</p>"},{"location":"api/godot_3/mod_loader_config/#get_current_config_name","title":"get_current_config_name","text":"<p>GDScript<pre><code>func get_current_config_name(mod_id: String) -&gt; String\n</code></pre> Retrieves the name of the current configuration for a specific mod Returns an empty string if no configuration exists for the mod or the user profile has not been loaded</p> <p>Parameters: - mod_id (String): The ID of the mod to retrieve the current configuration name for.</p> <p>Returns: - The currently active configuration name for the given mod id or an empty string if not found.</p>"},{"location":"api/godot_3/mod_loader_config/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"api/godot_3/mod_loader_config/#default_config_name","title":"DEFAULT_CONFIG_NAME","text":"GDScript<pre><code>const DEFAULT_CONFIG_NAME: String = \"default\"\n</code></pre>"},{"location":"api/godot_3/mod_loader_config/#log_name","title":"LOG_NAME","text":"GDScript<pre><code>const LOG_NAME: String = \"ModLoader:Config\"\n</code></pre>"},{"location":"api/godot_3/mod_loader_deprecated/","title":"ModLoaderDeprecated","text":"<p>This class provides methods for deprecating functions. Can be used by mods with public APIs.</p>"},{"location":"api/godot_3/mod_loader_deprecated/#methods-overview","title":"Methods Overview","text":"Method Description <code>deprecated_changed</code> Marks a method that has changed its name or class. <code>deprecated_removed</code> Marks a method that has been entirely removed, with no replacement. <code>deprecated_message</code> Marks a method with a freeform deprecation message."},{"location":"api/godot_3/mod_loader_deprecated/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_deprecated/#deprecated_changed","title":"deprecated_changed","text":"<p>GDScript<pre><code>func deprecated_changed(old_method: String, new_method: String, since_version: String, show_removal_note: bool = true) -&gt; void\n</code></pre> Marks a method that has changed its name or class.</p> <p>Parameters: - old_method (String): The name of the deprecated method. - new_method (String): The name of the new method to use. - since_version (String): The version number from which the method has been deprecated. - show_removal_note (bool): (optional) If true, includes a note about future removal of the old method. Default is true.</p>"},{"location":"api/godot_3/mod_loader_deprecated/#deprecated_removed","title":"deprecated_removed","text":"<p>GDScript<pre><code>func deprecated_removed(old_method: String, since_version: String, show_removal_note: bool = true) -&gt; void\n</code></pre> Marks a method that has been entirely removed, with no replacement. Note: This should rarely be needed but is included for completeness.</p> <p>Parameters: - old_method (String): The name of the removed method. - since_version (String): The version number from which the method has been deprecated. - show_removal_note (bool): (optional) If true, includes a note about future removal of the old method. Default is true.</p>"},{"location":"api/godot_3/mod_loader_deprecated/#deprecated_message","title":"deprecated_message","text":"<p>GDScript<pre><code>func deprecated_message(msg: String, since_version: String = \"\") -&gt; void\n</code></pre> Marks a method with a freeform deprecation message.</p> <p>Parameters: - msg (String): The deprecation message. - since_version (String): (optional) The version number from which the deprecation applies.</p>"},{"location":"api/godot_3/mod_loader_deprecated/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"api/godot_3/mod_loader_deprecated/#log_name","title":"LOG_NAME","text":"GDScript<pre><code>const LOG_NAME: String = \"ModLoader:Deprecated\"\n</code></pre>"},{"location":"api/godot_3/mod_loader_log/","title":"ModLoaderLog","text":"<p>This class provides methods for logging, retrieving logged data, and internal methods for working with log files.</p>"},{"location":"api/godot_3/mod_loader_log/#methods-overview","title":"Methods Overview","text":""},{"location":"api/godot_3/mod_loader_log/#logging","title":"Logging","text":"Method Description <code>fatal</code> Logs the error in red and a stack trace. Prefixed FATAL-ERROR. Note: Stops the execution in editor <code>error</code> Logs the message and pushes an error. Prefixed ERROR. <code>warning</code> Logs the message and pushes a warning. Prefixed WARNING. <code>info</code> Logs the message. Prefixed INFO. Most mods will use this. <code>success</code> Logs the message. Prefixed SUCCESS. <code>debug</code> Logs the message. Prefixed DEBUG. <code>debug_json_print</code> Logs the message formatted with [method JSON.print]. Prefixed DEBUG."},{"location":"api/godot_3/mod_loader_log/#accessing-stored-logs-data","title":"Accessing Stored Logs Data","text":"Method Description <code>get_all_as_resource</code> Returns an array of log entries as a resource. <code>get_all_as_string</code> Returns an array of log entries as a resource. <code>get_by_mod_as_resource</code> Returns an array of log entries as a resource for a specific mod_name. <code>get_by_mod_as_string</code> Returns an array of log entries as a string for a specific mod_name. <code>get_by_type_as_resource</code> Returns an array of log entries as a resource for a specific type. <code>get_by_type_as_string</code> Returns an array of log entries as a string for a specific type. <code>get_all</code> Returns an array of all log entries. <code>get_by_mod</code> Returns an array of log entries for a specific mod_name. <code>get_by_type</code> Returns an array of log entries for a specific type. <code>get_all_entries_as_string</code> Returns an array of log entries represented as strings."},{"location":"api/godot_3/mod_loader_log/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_log/#fatal","title":"fatal","text":"<p>GDScript<pre><code>func fatal(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the error in red and a stack trace. Prefixed FATAL-ERROR.</p> <p>?&gt; Stops the execution in editor</p> <p>Parameters: - message (String): The message to be logged as an error. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#error","title":"error","text":"<p>GDScript<pre><code>func error(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message and pushes an error. Prefixed ERROR.</p> <p>?&gt; Always logged</p> <p>Parameters: - message (String): The message to be logged as an error. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#warning","title":"warning","text":"<p>GDScript<pre><code>func warning(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message and pushes a warning. Prefixed WARNING.</p> <p>?&gt; Logged with verbosity level at or above warning (-v).</p> <p>Parameters: - message (String): The message to be logged as a warning. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#info","title":"info","text":"<p>GDScript<pre><code>func info(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message. Prefixed INFO.</p> <p>?&gt; Logged with verbosity level at or above info (-vv).</p> <p>Parameters: - message (String): The message to be logged as an information. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#success","title":"success","text":"<p>GDScript<pre><code>func success(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message. Prefixed SUCCESS.</p> <p>?&gt; Logged with verbosity level at or above info (-vv).</p> <p>Parameters: - message (String): The message to be logged as a success. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#debug","title":"debug","text":"<p>GDScript<pre><code>func debug(message: String, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message. Prefixed DEBUG.</p> <p>?&gt; Logged with verbosity level at or above debug (-vvv).</p> <p>Parameters: - message (String): The message to be logged as a debug. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#debug_json_print","title":"debug_json_print","text":"<p>GDScript<pre><code>func debug_json_print(message: String, json_printable, mod_name: String, only_once: bool = false) -&gt; void\n</code></pre> Logs the message formatted with [method JSON.print]. Prefixed DEBUG.</p> <p>?&gt; Logged with verbosity level at or above debug (-vvv).</p> <p>Parameters: - message (String): The message to be logged as a debug. - json_printable (Variant): The variable to be formatted and printed using [method JSON.print]. - mod_name (String): The name of the mod or ModLoader class associated with this log entry. - only_once (bool): (Optional) If true, the log entry will only be logged once, even if called multiple times. Default is false.</p>"},{"location":"api/godot_3/mod_loader_log/#get_all_as_resource","title":"get_all_as_resource","text":"<p>GDScript<pre><code>func get_all_as_resource() -&gt; Array\n</code></pre> Returns an array of log entries as a resource.</p> <p>Returns: - Array: An array of log entries represented as resource.</p>"},{"location":"api/godot_3/mod_loader_log/#get_all_as_string","title":"get_all_as_string","text":"<p>GDScript<pre><code>func get_all_as_string() -&gt; Array\n</code></pre> Returns an array of log entries as a string.</p> <p>Returns: - Array: An array of log entries represented as strings.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_mod_as_resource","title":"get_by_mod_as_resource","text":"<p>GDScript<pre><code>func get_by_mod_as_resource(mod_name: String) -&gt; Array\n</code></pre> Returns an array of log entries as a resource for a specific mod_name.</p> <p>Parameters: - mod_name (String): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns: - Array: An array of log entries represented as resource for the specified mod_name.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_mod_as_string","title":"get_by_mod_as_string","text":"<p>GDScript<pre><code>func get_by_mod_as_string(mod_name: String) -&gt; Array\n</code></pre> Returns an array of log entries as a string for a specific mod_name.</p> <p>Parameters: - mod_name (String): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns: - Array: An array of log entries represented as strings for the specified mod_name.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_type_as_resource","title":"get_by_type_as_resource","text":"<p>GDScript<pre><code>func get_by_type_as_resource(type: String) -&gt; Array\n</code></pre> Returns an array of log entries as a resource for a specific type.</p> <p>Parameters: - type (String): The log type associated with the log entries.</p> <p>Returns: - Array: An array of log entries represented as resource for the specified type.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_type_as_string","title":"get_by_type_as_string","text":"<p>GDScript<pre><code>func get_by_type_as_string(type: String) -&gt; Array\n</code></pre> Returns an array of log entries as a string for a specific type.</p> <p>Parameters: - type (String): The log type associated with the log entries.</p> <p>Returns: - Array: An array of log entries represented as strings for the specified type.</p>"},{"location":"api/godot_3/mod_loader_log/#get_all","title":"get_all","text":"<p>GDScript<pre><code>func get_all() -&gt; Array\n</code></pre> Returns an array of all log entries.</p> <p>Returns: - Array: An array of all log entries.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_mod","title":"get_by_mod","text":"<p>GDScript<pre><code>func get_by_mod(mod_name: String) -&gt; Array\n</code></pre> Returns an array of log entries for a specific mod_name.</p> <p>Parameters: - mod_name (String): The name of the mod or ModLoader class associated with the log entries.</p> <p>Returns: - Array: An array of log entries for the specified mod_name.</p>"},{"location":"api/godot_3/mod_loader_log/#get_by_type","title":"get_by_type","text":"<p>GDScript<pre><code>func get_by_type(type: String) -&gt; Array\n</code></pre> Returns an array of log entries for a specific type.</p> <p>Parameters: - type (String): The log type associated with the log entries.</p> <p>Returns: - Array: An array of log entries for the specified type.</p>"},{"location":"api/godot_3/mod_loader_log/#get_all_entries_as_string","title":"get_all_entries_as_string","text":"<p>GDScript<pre><code>func get_all_entries_as_string(log_entries: Array) -&gt; Array\n</code></pre> Returns an array of log entries represented as strings.</p> <p>Parameters: - log_entries (Array): An array of ModLoaderLogEntry Objects.</p> <p>Returns: - Array: An array of log entries represented as strings.</p>"},{"location":"api/godot_3/mod_loader_log/#sub-classes","title":"Sub-classes","text":""},{"location":"api/godot_3/mod_loader_log/#modloaderlogentry","title":"ModLoaderLogEntry","text":""},{"location":"api/godot_3/mod_loader_log/#properties","title":"Properties","text":""},{"location":"api/godot_3/mod_loader_log/#mod_name","title":"mod_name","text":"<p>GDScript<pre><code>var mod_name: String\n</code></pre> Name of the mod or ModLoader class this entry refers to.</p>"},{"location":"api/godot_3/mod_loader_log/#message","title":"message","text":"<p>GDScript<pre><code>var message: String\n</code></pre> The message of the log entry.</p>"},{"location":"api/godot_3/mod_loader_log/#type","title":"type","text":"<p>GDScript<pre><code>var type: String\n</code></pre> The log type, which indicates the verbosity level of this entry.</p>"},{"location":"api/godot_3/mod_loader_log/#time","title":"time","text":"<p>GDScript<pre><code>var time: String\n</code></pre> The readable format of the time when this log entry was created. Used for printing in the log file and output.</p>"},{"location":"api/godot_3/mod_loader_log/#time_stamp","title":"time_stamp","text":"<p>GDScript<pre><code>var time_stamp: int\n</code></pre> The timestamp when this log entry was created. Used for comparing and sorting log entries by time.</p>"},{"location":"api/godot_3/mod_loader_log/#stack","title":"stack","text":"<p>GDScript<pre><code>var stack: Array\n</code></pre> An array of ModLoaderLogEntry objects. If the message has been logged before, it is added to the stack.</p>"},{"location":"api/godot_3/mod_loader_log/#methods_1","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_log/#_init","title":"_init","text":"<p>GDScript<pre><code>func _init(_mod_name: String, _message: String, _type: String, _time: String) -&gt; void\n</code></pre> Initialize a ModLoaderLogEntry object with provided values.</p> <p>Parameters: - _mod_name (String): Name of the mod or ModLoader class this entry refers to. - _message (String): The message of the log entry. - _type (String): The log type, which indicates the verbosity level of this entry. - _time (String): The readable format of the time when this log entry was created.</p>"},{"location":"api/godot_3/mod_loader_log/#get_entry","title":"get_entry","text":"<p>GDScript<pre><code>func get_entry() -&gt; String\n</code></pre> Get the log entry as a formatted string.</p> <p>Returns: - String</p>"},{"location":"api/godot_3/mod_loader_log/#get_prefix","title":"get_prefix","text":"<p>GDScript<pre><code>func get_prefix() -&gt; String\n</code></pre> Get the prefix string for the log entry, including the log type and mod name.</p> <p>Returns: - String</p>"},{"location":"api/godot_3/mod_loader_log/#get_md5","title":"get_md5","text":"<p>GDScript<pre><code>func get_md5() -&gt; String\n</code></pre> Generate an MD5 hash of the log entry (prefix + message).</p> <p>Returns: - String</p>"},{"location":"api/godot_3/mod_loader_log/#get_all_entries","title":"get_all_entries","text":"<p>GDScript<pre><code>func get_all_entries() -&gt; Array\n</code></pre> Get all log entries, including the current entry and entries in the stack.</p> <p>Returns: - Array</p>"},{"location":"api/godot_3/mod_loader_log/#modloaderlogcompare","title":"ModLoaderLogCompare","text":""},{"location":"api/godot_3/mod_loader_log/#methods_2","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_log/#time_1","title":"time","text":"<p>GDScript<pre><code>func time(a: ModLoaderLogEntry, b: ModLoaderLogEntry) -&gt; bool\n</code></pre> Custom sorter that orders logs by time</p>"},{"location":"api/godot_3/mod_loader_log/#enumerations","title":"Enumerations","text":""},{"location":"api/godot_3/mod_loader_log/#verbosity_level","title":"VERBOSITY_LEVEL","text":"GDScript<pre><code>const VERBOSITY_LEVEL: Dictionary = {\"DEBUG\":3,\"ERROR\":0,\"INFO\":2,\"WARNING\":1}\n</code></pre>"},{"location":"api/godot_3/mod_loader_log/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"api/godot_3/mod_loader_log/#log_name","title":"LOG_NAME","text":"GDScript<pre><code>const LOG_NAME: String = \"ModLoader:Log\"\n</code></pre>"},{"location":"api/godot_3/mod_loader_log/#mod_log_path","title":"MOD_LOG_PATH","text":"<p>GDScript<pre><code>const MOD_LOG_PATH: String = \"user://logs/modloader.log\"\n</code></pre> Path to the latest log file.</p>"},{"location":"api/godot_3/mod_loader_mod/","title":"ModLoaderMod","text":"<p>This class provides helper functions to build mods. These are the main methods your mods will use.</p>"},{"location":"api/godot_3/mod_loader_mod/#methods-overview","title":"Methods Overview","text":"Method Description <code>install_script_extension</code> Install a script extension that extends a vanilla script. <code>register_global_classes_from_array</code> Register an array of classes to the global scope, since Godot only does that in the editor. <code>add_translation</code> Add a translation file. <code>get_mod_data</code> Gets the ModData from the provided namespace. <code>get_mod_data_all</code> Gets the ModData of all loaded Mods as Dictionary. <code>is_mod_loaded</code> Returns true if the mod with the given mod_id was successfully loaded. <code>append_node_in_scene</code> Appends a new node to a modified scene. <code>save_scene</code> Saves a modified scene to a file. <code>get_unpacked_dir</code> Returns the path to the directory where unpacked mods are stored."},{"location":"api/godot_3/mod_loader_mod/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_mod/#install_script_extension","title":"install_script_extension","text":"<p>GDScript<pre><code>func install_script_extension(child_script_path: String) -&gt; void\n</code></pre> Install a script extension that extends a vanilla script. The child_script_path should point to your mod's extender script.</p> <p>Example: <code>\"MOD/extensions/singletons/utils.gd\"</code></p> <p>Inside the extender script, include <code>extends {target}</code> where <code>{target}</code> is the vanilla path.</p> <p>Example: <code>extends \"res://singletons/utils.gd\"</code>.</p> <p>?&gt; Your extender script doesn't have to follow the same directory path as the vanilla file, but it's good practice to do so.</p> <p>To learn more about script extensions, read: Script Extensions</p> <p>Parameters: - child_script_path (String): The path to the mod's extender script.</p>"},{"location":"api/godot_3/mod_loader_mod/#register_global_classes_from_array","title":"register_global_classes_from_array","text":"<p>GDScript<pre><code>func register_global_classes_from_array(new_global_classes: Array) -&gt; void\n</code></pre> Register an array of classes to the global scope since Godot only does that in the editor.</p> <p>Format: <code>{ \"base\": \"ParentClass\", \"class\": \"ClassName\", \"language\": \"GDScript\", \"path\": \"res://path/class_name.gd\" }</code></p> <p>You can find these easily in the project.godot file under _global_script_classes (but you should only include classes belonging to your mod)</p> <p>?&gt; Using this method creates the override.cfg file in the game directory. If a mod uses it, the player is required to restart the game once, otherwise it may cause a crash as elements referred to by the class will be inaccessible. Additionally, any other Godot application (like the workshop uploader) will crash due to mismatched project settings.</p> <p>Parameters: - new_global_classes (Array): An array of class definitions to be registered.</p>"},{"location":"api/godot_3/mod_loader_mod/#add_translation","title":"add_translation","text":"<p>GDScript<pre><code>func add_translation(resource_path: String) -&gt; void\n</code></pre> Add a translation file.</p> <p>?&gt; The translation file should have been created in Godot already, such as when importing a CSV file. The translation file should be in the format mytranslation.en.translation.</p> <p>Parameters: - resource_path (String): The path to the translation resource file.</p>"},{"location":"api/godot_3/mod_loader_mod/#get_mod_data","title":"get_mod_data","text":"<p>GDScript<pre><code>func get_mod_data(mod_id: String) -&gt; ModData\n</code></pre> Gets the ModData from the provided namespace</p> <p>Parameters: - mod_id (String): The ID of the mod.</p> <p>Returns: - ModData: The ModData associated with the provided mod_id, or null if the mod_id is invalid.</p>"},{"location":"api/godot_3/mod_loader_mod/#get_mod_data_all","title":"get_mod_data_all","text":"<p>GDScript<pre><code>func get_mod_data_all() -&gt; Dictionary\n</code></pre> Gets the ModData of all loaded Mods as Dictionary.</p> <p>Returns: - Dictionary: A dictionary containing the ModData of all loaded mods.</p>"},{"location":"api/godot_3/mod_loader_mod/#is_mod_loaded","title":"is_mod_loaded","text":"<p>GDScript<pre><code>func is_mod_loaded(mod_id: String) -&gt; bool\n</code></pre> Returns true if the mod with the given mod_id was successfully loaded.</p> <p>Parameters: - mod_id (String): The ID of the mod.</p> <p>Returns: - bool: true if the mod is loaded, false otherwise.</p>"},{"location":"api/godot_3/mod_loader_mod/#append_node_in_scene","title":"append_node_in_scene","text":"<p>GDScript<pre><code>func append_node_in_scene(modified_scene: Node, node_name: String = \"\", node_parent = null, instance_path: String = \"\", is_visible: bool = true) -&gt; void\n</code></pre> Appends a new node to a modified scene.</p> <p>Parameters: - modified_scene (Node): The modified scene where the node will be appended. - node_name (String): (Optional) The name of the new node. Default is an empty string. - node_parent (Node): (Optional) The parent node where the new node will be added. Default is null (direct child of modified_scene). - instance_path (String): (Optional) The path to a scene resource that will be instantiated as the new node. Default is an empty string resulting in a Node instance. - is_visible (bool): (Optional) If true, the new node will be visible. Default is true.</p>"},{"location":"api/godot_3/mod_loader_mod/#save_scene","title":"save_scene","text":"<p>GDScript<pre><code>func save_scene(modified_scene: Node, scene_path: String) -&gt; void\n</code></pre> Saves a modified scene to a file.</p> <p>Parameters: - modified_scene (Node): The modified scene instance to be saved. - scene_path (String): The path to the scene file that will be replaced.</p>"},{"location":"api/godot_3/mod_loader_mod/#get_unpacked_dir","title":"get_unpacked_dir","text":"<p>GDScript<pre><code>func get_unpacked_dir() -&gt; String\n</code></pre> Returns the path to the directory where unpacked mods are stored.</p> <p>Returns: - String: The path to the unpacked mods directory.</p>"},{"location":"api/godot_3/mod_loader_mod/#constants-descriptions","title":"Constants Descriptions","text":""},{"location":"api/godot_3/mod_loader_mod/#log_name","title":"LOG_NAME","text":"GDScript<pre><code>const LOG_NAME: String = \"ModLoader:Mod\"\n</code></pre>"},{"location":"api/godot_3/mod_loader_mod_manager/","title":"ModLoaderModManager","text":"<p>Provides methods to manage mod state.</p> <p>Experimental</p> <p>This class may be unstable</p>"},{"location":"api/godot_3/mod_loader_mod_manager/#methods-overview","title":"Methods Overview","text":"Method Description <code>uninstall_script_extension</code> Uninstall a script extension. <code>reload_mods</code> Reload all mods. <code>disable_mods</code> Disable all mods. <code>disable_mod</code> Disable a mod."},{"location":"api/godot_3/mod_loader_mod_manager/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_mod_manager/#uninstall_script_extension","title":"uninstall_script_extension","text":"<p>GDScript<pre><code>func uninstall_script_extension(extension_script_path: String) -&gt; void:\n</code></pre> Uninstall a script extension.</p> <p>Parameters: - extension_script_path (String): The path to the extension script to be uninstalled.</p>"},{"location":"api/godot_3/mod_loader_mod_manager/#reload_mods","title":"reload_mods","text":"<p>GDScript<pre><code>func reload_mods() -&gt; void\n</code></pre> Reload all mods.</p> <p>?&gt; This function should be called only when actually necessary as it can break the game and require a restart for mods that do not fully use the systems put in place by the mod loader, so anything that just uses add_node, move_node ecc... To not have your mod break on reload please use provided functions like ModLoader::save_scene, ModLoader::append_node_in_scene and all the functions that will be added in the next versions Used to reload already present mods and load new ones</p>"},{"location":"api/godot_3/mod_loader_mod_manager/#disable_mods","title":"disable_mods","text":"<p>GDScript<pre><code>func disable_mods() -&gt; void\n</code></pre> Disable all mods.</p> <p>?&gt; This function should be called only when actually necessary as it can break the game and require a restart for mods that do not fully use the systems put in place by the mod loader, so anything that just uses add_node, move_node ecc... To not have your mod break on disable please use provided functions and implement a _disable function in your mod_main.gd that will handle removing all the changes that were not done through the Mod Loader</p>"},{"location":"api/godot_3/mod_loader_mod_manager/#disable_mod","title":"disable_mod","text":"<p>Disable a mod.</p> <p>?&gt; Note: This function should be called only when actually necessary as it can break the game and require a restart for mods that do not fully use the systems put in place by the mod loader, so anything that just uses add_node, move_node ecc... To not have your mod break on disable please use provided functions and implement a _disable function in your mod_main.gd that will handle removing all the changes that were not done through the Mod Loader</p> <p>Parameters: - mod_data (ModData): The ModData object representing the mod to be disabled.</p>"},{"location":"api/godot_3/mod_loader_user_profile/","title":"ModLoaderUserProfile","text":"<p>This class provides methods for working with user profiles.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#methods-overview","title":"Methods Overview","text":"Method Description <code>enable_mod</code> Enables a mod - it will be loaded on the next game start. <code>disable_mod</code> Disables a mod - it will not be loaded on the next game start. <code>set_mod_current_config</code> Sets the current config for a mod in a user profile's mod_list. <code>create_profile</code> Creates a new user profile with the given name, using the currently loaded mods as the mod list. <code>set_profile</code> Sets the current user profile to the given user profile. <code>delete_profile</code> Deletes the given user profile. <code>get_current</code> Returns the current user profile. <code>get_profile</code> Returns the user profile with the given name. <code>get_all_as_array</code> Returns an array containing all user profiles stored in ModLoaderStore."},{"location":"api/godot_3/mod_loader_user_profile/#methods","title":"Methods","text":""},{"location":"api/godot_3/mod_loader_user_profile/#enable_mod","title":"enable_mod","text":"<p>GDScript<pre><code>func enable_mod(mod_id: String, user_profile: ModUserProfile) -&gt; bool\n</code></pre> Enables a mod - it will be loaded on the next game start</p> <p>Parameters: - mod_id (String): The ID of the mod to enable. - user_profile (ModUserProfile): (Optional) The user profile to enable the mod for. Default is the current user profile.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#disable_mod","title":"disable_mod","text":"<p>GDScript<pre><code>func disable_mod(mod_id: String, user_profile: ModUserProfile) -&gt; bool\n</code></pre> Disables a mod - it will not be loaded on the next game start</p> <p>Parameters: - mod_id (String): The ID of the mod to disable. - user_profile (ModUserProfile): (Optional) The user profile to disable the mod for. Default is the current user profile.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#set_mod_current_config","title":"set_mod_current_config","text":"<p>GDScript<pre><code>func set_mod_current_config(mod_id: String, mod_config: ModConfig, user_profile: ModUserProfile) -&gt; bool\n</code></pre> Sets the current config for a mod in a user profile's mod_list.</p> <p>Parameters: - mod_id (String): The ID of the mod. - mod_config (ModConfig): The mod config to set as the current config. - user_profile (ModUserProfile): (Optional) The user profile to update. Default is the current user profile.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#create_profile","title":"create_profile","text":"<p>GDScript<pre><code>func create_profile(profile_name: String) -&gt; bool\n</code></pre> Creates a new user profile with the given name, using the currently loaded mods as the mod list.</p> <p>Parameters: - profile_name (String): The name of the new user profile (must be unique).</p>"},{"location":"api/godot_3/mod_loader_user_profile/#set_profile","title":"set_profile","text":"<p>GDScript<pre><code>func set_profile(user_profile: ModUserProfile) -&gt; bool\n</code></pre> Sets the current user profile to the given user profile.</p> <p>Parameters: - user_profile (ModUserProfile): The user profile to set as the current profile.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#delete_profile","title":"delete_profile","text":"<p>GDScript<pre><code>func delete_profile(user_profile: ModUserProfile) -&gt; bool\n</code></pre> Deletes the given user profile.</p> <p>Parameters: - user_profile (ModUserProfile): The user profile to delete.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#get_current","title":"get_current","text":"<p>GDScript<pre><code>func get_current() -&gt; ModUserProfile\n</code></pre> Returns the current user profile.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#get_profile","title":"get_profile","text":"<p>GDScript<pre><code>func get_profile(profile_name: String) -&gt; ModUserProfile\n</code></pre> Returns the user profile with the given name, or null if not found.</p> <p>Parameters: - profile_name (String): The name of the user profile to retrieve.</p>"},{"location":"api/godot_3/mod_loader_user_profile/#get_all_as_array","title":"get_all_as_array","text":"<p>GDScript<pre><code>func get_all_as_array() -&gt; Array\n</code></pre> Returns an array containing all user profiles stored in ModLoaderStore.</p>"},{"location":"guides/integration/cli_args/","title":"CLI Args","text":""},{"location":"guides/integration/cli_args/#supported-command-line-arguments","title":"Supported Command Line Arguments","text":"Arg Info <code>--mods-path=\"path/to/mod/zips\"</code> Override the path to the mod ZIPs dir. Default path is res://mods <code>--configs-path=\"path/to/mod/configs\"</code> Override the path to the config JSONs dir. Default path is res://configs <code>--disable-mods</code> Mods will not be loaded. <code>-vvv</code> / <code>--log-debug</code> Set the log verbosity to debug - log everything. <code>-vv</code> / <code>--log-info</code> Set the log verbosity to info - log everything except debug logs. <code>-v</code> / <code>--log-warning</code> Set the log verbosity to warning - only log errors and warnings. <code>--log-ignore=\"namespace0-modname0,namespace1-modname1\"</code> Ignores specific mod IDs when logging"},{"location":"guides/integration/cli_args/#arguments-related-to-gml-setup","title":"Arguments Related to GML setup","text":"Arg Info <code>--script addons/mod_loader/mod_loader_setup.gd</code> Use this startup flag to enable the self setup. <code>--only-setup</code> Allows to setup the mod loader without user notification, or auto restart. <code>--setup-create-override-cfg</code> Forces the setup to create the override.cfg in the game base directory. Skips the project.binary injection. <p>You can use these in the Godot editor via Project &gt; Project Settings &gt; Display &gt; Editor &gt; Main Run Args</p>"},{"location":"guides/integration/godot_project_setup/","title":"Godot Project Setup","text":"<p>If you don't have your project set up yet, see Decompiling Games and GodotSteam.</p>"},{"location":"guides/integration/godot_project_setup/#installing-the-mod-loader","title":"Installing The Mod Loader","text":"<p>Info</p> <p>Download links for GitHub and the Godot Asset Lib can be found on the Home Page. If you use the asset lib download you can skip step 1.</p> <ol> <li>After downloading, create a new <code>/addons</code> folder, and add the mod_loader and JSON_Schema_Validator folder to it.</li> <li>Add <code>mod_loader.gd</code> and <code>mod_loader_store.gd</code> to your project's Autoload settings:<ul> <li>Project &gt; Project Settings &gt; Global (Autoload in previous versions)</li> <li>At the top left, click the folder icon next to Path. Browse to res://addons/mod_loader/mod_loader.gd and select it.</li> <li>At the top right, <code>ModLoader</code> will be shown in the \"Node Name\" field. Click Add.</li> <li>Repeat the above steps for mod_loader_store.gd</li> </ul> </li> <li> <p>Reorder the autoloads so that <code>ModLoaderStore</code> is at the top and <code>ModLoader</code> is in the second spot.</p> Note <p>The ModLoader autoloads must be placed at the top of the autoload list to ensure they can affect other autoloads/singletons. In certain cases, you may want to make modding of an autoload more difficult, such as for cheat detection. In such cases, you can use the <code>allow_modloader_autoloads_anywhere</code> setting. Read more about it on the Mod Loader Options page.</p> </li> <li> <p>Click Close, and save your project.</p> <ul> <li>Scene &gt; Save All Scenes</li> </ul> </li> </ol> <p>Tip</p> <p>The Mod Loader can be customized further by changing the Options</p> <p></p> <p>Adding <code>ModLoaderStore</code> and <code>ModLoader</code> to the Autoload/Global settings of the game Brotato</p>"},{"location":"guides/integration/godot_project_setup/#related-examples","title":"Related Examples","text":"<ul> <li>GodotModding-UserProfileUI - A mod that adds an interface to manage mod user profiles, to handle enabling and disabling of mods.</li> <li>GodotModding-ModConfigEditor - A mod that adds an interface to edit mod configs, the user settings that mod developers can add for users to customise their experience.</li> </ul>"},{"location":"guides/integration/godot_project_setup/#related-pages","title":"Related Pages","text":"<ul> <li>Decompiling Games - Instructions for decompiling a game, for editing in Godot.</li> <li>GodotSteam - Most games require you to use GodotSteam, instead of vanilla Godot.</li> </ul>"},{"location":"guides/integration/mod_distribution/","title":"Mod Distribution","text":"<p>Created mods are just plain <code>.zip</code> files, which makes it easy for users to unzip and inspect for malicious code.</p> <p>To let your community distribute these zips, you can either</p> <ul> <li>set up Steam Workshop if you are on Steam, or</li> <li>contact the Thunderstore team to create a category for you (or let the community do that)</li> </ul>"},{"location":"guides/integration/mod_loader_options/","title":"Mod Loader Options","text":"<p>For easy configuration of the Mod Loader, you can use the ModLoaderOptions resource.  Navigate to <code>res://addons/mod_loader/options</code> and double-click <code>options.tres</code> to open the resource editor.</p> <p></p>"},{"location":"guides/integration/mod_loader_options/#available-options","title":"Available Options","text":"Option Name Description enable_mods Enable or disable loading of mods. log_level Set verbosity level for logs. locked_mods List of mods that cannot be disabled or enabled in a user profile. disabled_mods List of mods not loaded on game restart. allow_modloader_autoloads_anywhere If true, ModLoaderStore and ModLoader Autoloads do not have to be the first Autoloads steam_workshop_enabled If true, ModLoader loads mod ZIPs from Steam workshop directory instead of default. override_path_to_mods Overrides path from which mods are loaded (default: \"res://mods\"). override_path_to_configs Overrides path from which mod configurations are loaded (default: \"res://configs\"). override_path_to_workshop Overrides path to Steam workshop directory, for loading mods from there (editor use). ignore_deprecated_errors If true, deprecated functions trigger warning instead of fatal error. ignored_mod_names_in_log List of mods whose messages should be ignored in the log."},{"location":"guides/integration/mod_loader_options/#profiles","title":"Profiles","text":"<p>You can find predefined option profiles in <code>res://addons/mod_loader/options/profiles</code>. These resource files can be dragged and dropped into the value field of a specific feature flag entry.</p> <p> </p> <p>You can create your own option profiles by saving a <code>ModLoaderOptionsProfile</code> resource. One way to do this is to duplicate one of the existing profiles:</p> <p>Right-click -&gt; Duplicate...</p> <p></p> <p>Give it a new name</p> <p></p> <p>Now you can edit it to your liking by double-clicking it in the file dialog</p> <p></p>"},{"location":"guides/integration/mod_loader_options/#feature-override-options-feature-tags","title":"Feature Override Options (Feature Tags)","text":"<p>Available since</p> <p>6.2.0</p> <p>If you have a specific feature tag that should use different settings, you can set them as a key-value pair here.  The most common use case is to use different settings when in the editor - using the <code>editor</code> tag - that's why it is  already added as an override by default.</p> <p>Another use case is managing multiple release platforms - Steam and others.  In that case, you would define a custom feature tag for steam, add it as override and enable steam workshop in the  corresponding options. Of course, you can also use steam workshop as default and disable it otherwise.</p> <p>To add another override, add a new entry to the dictionary. - Select <code>String</code> as type for the key and enter one of Godot's feature tags or one you have defined yourself. - Select <code>Resource</code> as type for the value and drag one of the available <code>ModLoaderOptionsProfile</code> resources into the field.</p> <p>Be careful with overlapping feature tags.</p> <p>Since dictionaries are not ordered, we cannot guarantee the order of two overrides being applied.   If, for example both \"Windows\" and \"release\" define an override, the result is not predictable on platforms where both tags apply.</p>"},{"location":"guides/integration/mod_loader_options/#game-version-validation","title":"Game Version Validation","text":"<p>Available since</p> <p>7.1.0</p> <p>There are multiple ways to validate that a mod is compatible with your current game version. The most common and easiest method - apart from disabling version checks - is to follow Semantic Versioning (1).  The mod loader will automatically disable mods when you increase the MAJOR version and disallow turning them  on until the mod creator updated it. This reduces crashes when you make big changes to your game which will likely break many mods. When you increase the MINOR version, the mod loader will disable mods on first launch, but still allow  players to manually enable them again at their own risk.</p> <ol> <li>Versions following the format MAJOR.MINOR.PATCH, i.e. 3.4.1</li> </ol> <p>If that is not an option for you, you can still benefit from version validation by writing custom validation logic.</p> <p>Set the <code>customize_script_path</code> option to where you store your script and run your validation here - the full  <code>ModLoaderOptionsProfile</code> will be passed to this script instance. Though keep in mind that since validation  is run during <code>_init()</code>, some values may not be accessible, so we recommend storing your game version in a  global class or similar.</p> <p>Example:</p> Godot 4Godot 3 GDScript<pre><code>extends RefCounted\n\n# This is an example script for the ModLoaderOptionsProfile `customize_script_path`.\n# Ideally, place this script outside the `mod_loader` directory to simplify the update process.\n\n# This script is loaded after `mod_loader_store.ml_options` has been initialized.\n# It receives `ml_options` as an argument, allowing you to apply settings\n# that cannot be configured through the editor UI.\nfunc _init(ml_options: ModLoaderOptionsProfile) -&gt; void:\n    # Use OS.has_feature() to apply changes only for specific platforms,\n    # or create multiple customization scripts and set their paths accordingly in the option profiles.\n    if OS.has_feature(\"Steam\"):\n        pass\n    elif OS.has_feature(\"Epic\"):\n        pass\n    else:\n        # Set `custom_game_version_validation_callable` to use a custom validation function.\n        ml_options.custom_game_version_validation_callable = custom_is_game_version_compatible\n\n# Custom validation function\n# See `ModManifest._is_game_version_compatible()` for the default validation logic.\nfunc custom_is_game_version_compatible(manifest: ModManifest) -&gt; bool:\n    print(\"! \u261e\uff9f\u30ee\uff9f)\u261e CUSTOM VALIDATION HERE \u261c\uff9f\u30ee\uff9f\u261c) !\")\n\n    var mod_id := manifest.get_mod_id()\n\n    for version in manifest.compatible_game_version:\n        if not version == \"pizza\":\n            # Push a warning message displayed after manifest validation is complete.\n            manifest.validation_messages_warning.push_back(\n                \"The mod \\\"%s\\\" may not be compatible with the current game version.\n                Enable at your own risk. (Current game version: %s, mod compatible with game versions: %s)\" %\n                [mod_id, \"MyGlobalVars.MyGameVersion\", manifest.compatible_game_version]\n            )\n            return true\n\n        if not version == \"pineapple\":\n            # Push an error message displayed after manifest validation is complete.\n            manifest.validation_messages_error.push_back(\n                \"The mod \\\"%s\\\" is incompatible with the current game version.\n                (Current game version: %s, mod compatible with game versions: %s)\" %\n                [mod_id, \"MyGlobalVars.MyGameVersion\", manifest.compatible_game_version]\n            )\n            return false\n\n    return true\n</code></pre> <p>Warning</p> <p>This feature does not exist in Godot 3</p>"},{"location":"guides/integration/mod_loader_self_setup/","title":"Mod Loader Self Setup","text":"<p>If the game you want to mod does not natively use this ModLoader, you will have to complete a few steps to set it up:</p> <ol> <li>Download the latest release of the ModLoader</li> <li>Place the <code>/addons</code> folder from the ModLoader next to the executable of the game you want to mod.</li> <li>Set this flag <code>--script addons/mod_loader/mod_loader_setup.gd</code><ul> <li>Steam: right-click the game in the left sidebar &gt; press <code>properties</code> &gt; enter the flag in <code>startup options</code></li> <li>Other: search for \"set launch (or command line) parameters [your platform]\"</li> </ul> </li> </ol> <p>If the game window shows <code>(Modded)</code> in the title, setup was successful.</p> <p>It is possible to add additional setup arguments, but only do so if a game-specific setup documentation advises it. More install arguments here.</p>"},{"location":"guides/integration/mod_loader_self_setup/#a-deeper-look","title":"A deeper look","text":"<p>The ModLoader comes with a helper script to properly install itself without having to recompile a game's source. There are two options to make this work: - Inject a custom <code>project.binary</code> file into the games main <code>.pck</code>     To do this, GodotPckTool is used.     This approach is currently only supported on Windows and with games that have a .pck file that is not embedded.     Using this method allows us to add the ModLoader at the top of the autoload chain.     This is important, because it allows mods to add Script Extensions to autoloads.</p> <ul> <li>Use Godot's <code>override.cfg</code> functionality to override the game project settings     This is the ideal solution if mods for a game don't require extensions of autoloads.     It uses the built-in way to override project settings via an <code>override.cfg</code> in the game directory.     If you prefer this method or are using an operating system that doesn't support the binary injection yet,     you can set this CLI argument <code>--setup-create-override-cfg</code>.     For more details check Godot's ProjectSettings Docs at Overriding</li> </ul> <p>We hope to only use the <code>override.cfg</code> in the future - that's why we opened a feature proposal that allows the overriding of the autoload order. Please consider upvoting this proposal so modding becomes easier for everyone :)</p>"},{"location":"guides/integration/mod_loader_self_setup/#folder-locations","title":"Folder locations","text":"<p>Game Executable: Right-click the game in Steam &gt; Click Manage &gt; Browse Local Files. This will open the game's folder.</p> <p>Note: For MacOS, you are also at the right place even though the actual executable is in <code>/Contents/MacOS</code> within that folder. The override.cfg will be placed there, everything else (like the mods folder) goes right here.</p> <p>User Data: - Windows: <code>%appdata%\\Godot\\app_userdata\\&lt;game name&gt;</code></p> <ul> <li> <p>Linux: <code>~/.local/share/godot/app_userdata/&lt;game name&gt;</code></p> </li> <li> <p>Mac: <code>~/Library/Application Support/Godot/app_userdata/&lt;game name&gt;</code></p> </li> </ul>"},{"location":"guides/integration/user_profiles/","title":"Mod User Profiles","text":""},{"location":"guides/integration/user_profiles/#overview","title":"Overview","text":"<p>User profiles allow users to create presets that define which mods are active and how they are configured.</p>"},{"location":"guides/integration/user_profiles/#data-storage","title":"Data Storage","text":"<p>Note</p> <p>You do not need to manually handle data saving. This is managed by the ModLoaderUserProfile API.</p> <p>User profiles are stored in the user's directory in the <code>mod_user_profiles.json</code> file.</p>"},{"location":"guides/integration/user_profiles/#file-structure","title":"File Structure","text":"Text Only<pre><code>current_profile\nprofiles\n\u251c\u2500\u2500 profileName\n\u2502   \u2514\u2500\u2500 mod_list\n\u2502       \u2514\u2500\u2500 mod-id\n\u2502           \u251c\u2500\u2500 current_config\n\u2502           \u251c\u2500\u2500 is_active\n\u2502           \u2514\u2500\u2500 zip_path\n\u2514\u2500\u2500 profileName\n    \u2514\u2500\u2500 [...]\n</code></pre>"},{"location":"guides/integration/user_profiles/#example-mod_user_profilesjson","title":"Example <code>mod_user_profiles.json</code>","text":"JSON<pre><code>{\n    \"current_profile\": \"default\",\n    \"profiles\": {\n        \"default\": {\n            \"mod_list\": {\n                \"GodotModding-UserProfile\": {\n                    \"current_config\": \"default\",\n                    \"is_active\": true,\n                    \"zip_path\": \"C:/Path/To/Your/Game/mods/GodotModding-UserProfile.zip\"\n                },\n                \"GodotModding-TEST01\": {\n                    \"is_active\": true,\n                    \"zip_path\": \"\"\n                },\n                \"GodotModding-TESTHOOKS\": {\n                    \"is_active\": true,\n                    \"zip_path\": \"\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"guides/integration/user_profiles/#quickstart","title":"Quickstart","text":""},{"location":"guides/integration/user_profiles/#example-interface","title":"Example Interface","text":"<p>If you plan to use the profile and mod config features, we recommend integrating profile and config management directly into your game. This ensures a seamless experience for players when managing their mods.</p> <p>A good starting point is the User Profile UI Mod, which you can use as a base to build your own implementation:</p> <p></p>"},{"location":"guides/modding/config_json/","title":"Config JSON","text":"<p>The Godot ModLoader supports config files in the JSON format.</p>"},{"location":"guides/modding/config_json/#json-schema","title":"JSON Schema","text":"<p>Mod developers can choose to add a JSON Schema to their mod's manifest file using the <code>extra.godot.config_schema</code> key.</p> JSON<pre><code>{\n    \"extra\": {\n        \"godot\": {\n            \"config_schema\": {\n                \"title\": \"Config\",\n                \"description\": \"Config for this Mod\",\n                \"type\": \"object\",\n                \"properties\": {\n                    \"example_text\": {\n                        \"title\": \"Example text:\",\n                        \"type\": \"string\",\n                        \"default\": \"Some example string\"\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"guides/modding/config_json/#defaults","title":"Defaults","text":"<p>The <code>default</code> key in the schema is used to generate the default config.</p>"},{"location":"guides/modding/config_json/#unsupported-keys","title":"Unsupported Keys","text":"<p>The following keys are part of the JSON Schema 2020-12 Draft but are currently not supported by ModLoader:</p> <p>Type</p> <p>Key</p> Array contains Array minContains Array maxContains Array uniqueItems Object patternProperties String *format Note <p>The <code>format</code> key has one compatible property called <code>color</code> which is explained in more detail in the Additional Keys and Properties section. If you require any of these validations, please let us know by opening an issue or joining our Discord.</p>"},{"location":"guides/modding/config_json/#additional-keys-and-properties","title":"Additional Keys and Properties","text":"<p>The following keys and properties are not part of the JSON Schema Draft but have been added for ease of use in ModLoader:</p> Type Key Property Description String format color A hexadecimal color string in ARGB format"},{"location":"guides/modding/config_json/#color-example","title":"Color Example","text":"JSON<pre><code>\"color\": {\n    \"type\": \"string\",\n    \"title\": \"Color Over\",\n    \"format\": \"color\",\n    \"default\": \"#f7000000\"\n}\n</code></pre>"},{"location":"guides/modding/config_json/#learn-json-schema","title":"Learn JSON Schema","text":"<p>For more details on how to write JSON Schemas, we recommend checking out Understanding JSON Schema.</p>"},{"location":"guides/modding/config_json/#creating-configs","title":"Creating Configs","text":"<p>Mod users can choose to create their own configs by preferably using a Config Editor UI provided by the game or a mod. If no UI is available, configs can be added by duplicating the default config file and modifying it. This is less ideal because the config is validated against the schema in the mod's manifest. Creating a valid config \"by hand\" requires checking the JSON Schema in the mod's manifest file.</p> <p>Mod config files are stored in <code>user://configs/{mod_id}/{config_name}.json</code>. If a mod has a config, there should always be the <code>default.json</code> config file.</p>"},{"location":"guides/modding/config_json/#applying-configs-to-your-mod","title":"Applying Configs to Your mod","text":"<p>You can retrieve the current config for your mod by calling <code>ModLoaderConfig.get_current_config(\"your_mod_id\")</code>, which returns a <code>ModConfig</code> Resource.</p> <p>A <code>ModConfig</code> resource contains:</p> Property Description name The config name mod_id The mod_id this config belongs to schema The schema for your configs data The data this config holds save_path The path where the JSON file for this config is stored is_valid False if any data is invalid <p>For mod developers, the <code>data</code> property is the most relevant. Depending on how the config selection is implemented, you might want to check if the config is valid using <code>is_valid</code>.</p> <p>With all this in mind, you can add something like the following code to your <code>mod_main.gd</code> <code>ready()</code> function:</p> <p>mod_main.gd GDScript<pre><code>_ready(): \n    # Get the current config\n    var config = ModLoaderConfig.get_current_config(\"your_mod_id\")\n\n    # Connect to current_config_changed signal\n    ModLoader.connect(\"current_config_changed\", self, \"_on_current_config_changed\")\n\n    # Apply configs\n    apply_config(config)\n\n\nfunc apply_config(config: ModConfig) -&gt; void:\n    # Code to apply the config\n    # In this example, an 'apply_config' function is called in a different scene\n    different_scene.call_deferred(\"apply_config\", config)\n\n\nfunc _on_current_config_changed(config: ModConfig) -&gt; void:\n    # Check if the config of your mod has changed!\n    if config.mod_id == \"your_mod_id\":\n        apply_config(config)\n</code></pre></p> <p>different_scene.gd GDScript<pre><code>func apply_config(config: ModConfig) -&gt; void:\n    label_select_profile.text = config.data.select_profile_text\n\n    var material_settings: Dictionary = config.data.material_settings\n\n    material.set_shader_param(\"animate\", material_settings.animate)\n    material.set_shader_param(\"square_scale\", material_settings.square_scale)\n    material.set_shader_param(\"blur_amount\", material_settings.blur_amount)\n    material.set_shader_param(\"mix_amount\", material_settings.mix_amount)\n    material.set_shader_param(\"color_over\", Color(material_settings.color))\n</code></pre></p>"},{"location":"guides/modding/creating_mod_config_schema/","title":"Mod Configs","text":""},{"location":"guides/modding/creating_mod_config_schema/#creating-a-mod-config-schema-with-json-schemas","title":"Creating a Mod Config Schema with JSON-Schemas","text":""},{"location":"guides/modding/creating_mod_config_schema/#setting-up-your-manifest-file","title":"Setting Up Your Manifest File","text":"<p>To define your mod's configuration schema, you need to provide a JSON-Schema within your mod's manifest. Follow these steps to set it up: 1. Open your mod's <code>manifest.json</code> file. 2. Under the <code>\"extra\"</code> -&gt; <code>\"godot\"</code> section, add a <code>\"config_schema\"</code> key as shown below: JSON<pre><code>{\n    \"name\": \"ModName\",\n    \"namespace\": \"GodotModding\",\n    \"version_number\": \"0.2.0\",\n    \"description\": \"Example Mod\",\n    \"website_url\": \"https://github.com/GodotModding\",\n    \"dependencies\": [],\n    \"extra\": {\n        \"godot\": {\n            \"authors\": [\"GodotModding\"],\n            \"optional_dependencies\": [],\n            \"compatible_game_version\": [],\n            \"compatible_mod_loader_version\": [\"6.2.0\"],\n            \"incompatibilities\": [],\n            \"load_before\": [],\n            \"tags\": [],\n            \"config_schema\": {}\n        }\n    }\n}\n</code></pre></p>"},{"location":"guides/modding/creating_mod_config_schema/#understanding-json-schema","title":"Understanding JSON-Schema","text":"<p>Before diving into creating your mod's configuration schema, it's essential to understand JSON-Schemas. JSON-Schema is a powerful tool for validating and describing the structure of JSON data. To get started, we recommend reading the Understanding JSON Schema documentation. Use the introductory content and type pages as references when crafting your schema.</p> <p>ModLoader supports most of the keys described in the JSON Schema 2020-12 Draft. To view a complete list of unsupported and additional keys, check out the Config JSON section of our docs.</p>"},{"location":"guides/modding/creating_mod_config_schema/#writing-your-config-schema","title":"Writing Your Config Schema","text":"<p>Now that you have a grasp of JSON-Schemas, it's time to create your Mod Config Schema. Let's break down the process:</p>"},{"location":"guides/modding/creating_mod_config_schema/#the-schema-head","title":"The Schema \"Head\"","text":"<p>In the schema \"head,\" you'll provide general information about your schema, such as its title and description. Although ModLoader doesn't use this information, it's considered best practice to include it. Here's a basic example: JSON<pre><code>\"config_schema\": {\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"title\": \"Config\",\n    \"description\": \"Config for this Mod\",\n    \"type\": \"object\",\n    \"properties\": {}\n}\n</code></pre></p> <p>Feel free to customize the \"title\" and \"description\" to match your mod's specific configuration.</p>"},{"location":"guides/modding/creating_mod_config_schema/#defining-properties","title":"Defining Properties","text":"<p>The <code>\"properties\"</code> section is where you define what's allowed in your mod's configuration. Below are examples for different types of values:</p>"},{"location":"guides/modding/creating_mod_config_schema/#number-values-and-general-structure","title":"Number Values and general structure","text":"<p>JSON<pre><code>\"player_speed\": {\n    \"type\": \"number\",\n    \"title\": \"Player Speed Multiplier\",\n    \"minimum\": 0.1,\n    \"maximum\": 2.0,\n    \"multipleOf\": 0.1,\n    \"default\": 1.0\n}\n</code></pre> - <code>\"player_speed\"</code>is the property key, used to access this specific config data later. - <code>\"type\"</code> specifies the data type. - <code>\"title\"</code> is the display title for this property, used by config UIs. - <code>\"minimum\"</code> and \"maximum\" set the allowed number range. - <code>\"multipleOf\"</code> defines the allowable increments for the number. - <code>\"default\"</code> provides a default or starting value.</p>"},{"location":"guides/modding/creating_mod_config_schema/#boolean-values","title":"Boolean Values","text":"<p>GDScript<pre><code>\"aim_assist\": {\n    \"type\": \"boolean\",\n    \"title\": \"Aim Assist\",\n    \"default\": false\n}\n</code></pre> For boolean values, simply include the <code>\"default\"</code> property.</p>"},{"location":"guides/modding/creating_mod_config_schema/#string-values","title":"String Values","text":"<p>JSON<pre><code>\"character_name\": {\n    \"title\": \"Character Name\",\n    \"type\": \"string\",\n    \"minLength\": 3,\n    \"maxLength\": 10,\n    \"default\": \"Udo\"\n}\n</code></pre> For string values, you can use additional properties like <code>\"minLength\"</code> and <code>\"maxLength\"</code>. Check the json-schema-docs for more details.</p>"},{"location":"guides/modding/creating_mod_config_schema/#string-color-values","title":"String Color Values","text":"<p>JSON<pre><code>\"color\": {\n    \"type\": \"string\",\n    \"title\": \"Color\",\n    \"format\": \"color\",\n    \"default\": \"#f7000000\"\n}\n</code></pre> The <code>\"format: \"color\"</code> is a special case not covered in the JSON Schema Draft. We've added it to Mod Loader for common color use cases. You can specify a default value in the ARGB format.</p> <p>For additional keys and properties, refer to the Config JSON section of our docs.</p>"},{"location":"guides/modding/creating_mod_config_schema/#conclusion","title":"Conclusion","text":"<p>ModLoader will recognize the schema and automatically generate a default config based on it. Depending on the game, you should see the default config in the UI.</p> <p>For more information about Mod Configs visit the following sides: * Config JSON * ModLoaderConfig</p> <p>For further assistance, you can join us on Discord or open a new issue.</p>"},{"location":"guides/modding/distributing_mods/","title":"Distributing Mods","text":"<p>A finished mod ready for distribution is just a <code>.zip</code> file which you can share with others. Where it is shared specifically depends on the game and modding community. For Steam games with official support, Steam workshop is a common place. For the rest, Thunderstore is a good option.</p>"},{"location":"guides/modding/distributing_mods/#exporting","title":"Exporting","text":"<p>The first step to distribution is exporting your mod. You can make this zip manually, but if you have custom assets it may get quite involved. In any case, you need to follow the zip structure.</p> <p>Exporting is a lot simpler if you use the mod tool plugin to export since it does all those steps automagically.</p>"},{"location":"guides/modding/distributing_mods/#distribution","title":"Distribution","text":"<p>You can technically just share your mod zip with anyone through any means, but there are better ways.</p>"},{"location":"guides/modding/distributing_mods/#steam","title":"Steam","text":"<p>First, quickly test your mod as if it were in the steam workshop. Then you can use the workshop uploader to get your mod on the workshop.</p> <p>Once uploaded, the item will be private by default, you can change this in the right sidebar under \"visibility\" (5).</p> <p>If your mod has dependencies, you can add other steam workshop items which will automatically be downloaded when your mod is downloaded, by adding \"Required items\" (4).</p> <p></p> <p>You can add additional images and description from the steam interface under \"edit title and description\" (1) and \"add images\" (2). The item icon/preview image can only be changed with a new upload. Note that the title will be overwritten with the mod id when you upload a new version. This is a quirk of the workshop uploader.</p> <p>If you want to allow others in your team to make edits to the workshop item, you can \"add contributors\" (3) from your Steam friends list.</p>"},{"location":"guides/modding/file_paths/","title":"Important Files and Folders","text":"<p>A brief overview of where to find a few important files and folders across your computer. </p> <p>For mod specific files have a look at mod files and mod structure. </p>"},{"location":"guides/modding/file_paths/#steam","title":"Steam","text":""},{"location":"guides/modding/file_paths/#game-files","title":"Game files","text":"<ol> <li>In Steam, right-click the game in the left sidebar -&gt; \"Manage\" -&gt; \"Browse local files\".  </li> <li>This will take you to <code>[...]/steamapps/common/&lt;GAME NAME&gt;</code></li> <li>Contents of this folder vary by OS</li> <li>The important files for modding are the executable and the <code>&lt;GAME NAME&gt;.pck</code> file. <ul> <li>The executable is essentially all of godot, which runs the game, and the <code>.pck</code> is the actual game. </li> </ul> </li> <li>If the pck is not present on windows or linux, it is embedded into the <code>.exe</code>, it still exists, don't worry.</li> <li>On macOS, the whole application is wrapped into an <code>.app</code> bundle (which is basically a fancy folder)<ul> <li>you can right-click the <code>.app</code> and \"show package contents\" from the context menu</li> <li>The <code>.pck</code> is within that bundle: <code>/Contents/Resources/&lt;GAME NAME&gt;.pck</code></li> <li>The executable is: <code>/Contents/MacOS/&lt;GAME NAME&gt;</code></li> </ul> </li> </ol>"},{"location":"guides/modding/file_paths/#workshop-folder","title":"Workshop Folder","text":"<ol> <li>Start from the game files</li> <li>Navigate two folders back, to <code>/steamapps</code>. This folder also contains <code>/workshop</code></li> <li>Navigate to <code>[...]/steamapps/workshop/content/&lt;STEAM GAME ID&gt;/&lt;WORKSHOP ITEM ID&gt;</code></li> </ol> <p>Note: The two Steam IDs can be found in their store and workshop links  Game store page: <code>https://store.steampowered.com/app/1637320/Dome_Keeper/</code> -&gt; <code>1637320</code> Workshop item page: <code>https://steamcommunity.com/sharedfiles/filedetails/?id=2440099853</code> -&gt; <code>2440099853</code></p>"},{"location":"guides/modding/file_paths/#godot-user-data-location","title":"Godot User Data Location","text":"<p>This refers to Godot's default user data folder, also known as <code>user://</code> in the editor.</p> WindowsLinuxmacOS <p>Press Win+R, search  Text Only<pre><code>%appdata%/godot/app_userdata/&lt;GAME NAME&gt;\n</code></pre> Or manually navigate to Text Only<pre><code>C:\\Users\\&lt;YOUR USERNAME&gt;\\AppData\\Roaming\\Godot\\app_userdata\\&lt;GAME NAME&gt;\n</code></pre></p> <p>Tip</p> <p>AppData is a hidden folder, you can toggle hidden file visibility in the file explorer under  <code>view &gt; show &gt; hidden items</code></p> <p>Navigate to Text Only<pre><code>~/.local/share/godot/app_userdata/&lt;GAME NAME&gt;\n</code></pre> If this folder is empty for a steam game, also try Text Only<pre><code>~/.steam/steam/steamapps/compatdata/&lt;STEAM APP ID&gt;\n</code></pre> The app id is the number found in the url when visiting the game's steam page.</p> <p>Tip</p> <p>Files and folder prefixed with a <code>.</code> are hidden by default, in many distributions you can press Ctrl+H to toggle hidden file visibility. In the shell you can list all with them <code>ls -a</code>.</p> <p>open Finder, press Cmd+Shift+G, search Text Only<pre><code>~/Library/Application Support/Godot/app_userdata/&lt;GAME NAME&gt;\n</code></pre> or manually navigate to Text Only<pre><code>/Users/&lt;YOUR USERNAME&gt;/Library/Application Support/Godot/app_userdata/&lt;GAME NAME&gt;\n</code></pre></p> <p>Tip</p> <p><code>Library</code> is a hidden folder, press Cmd+Shift+. to toggle hidden file visibility in Finder</p> <p>Note</p> <p>Make sure to actually replace <code>&lt;GAME NAME&gt;</code> with the name of the game you are looking for.  Or leave it out and navigate the last step by hand if you don't know the exact folder name.</p>"},{"location":"guides/modding/file_paths/#common-user-data","title":"Common User Data","text":"<p>Logs are useful for troubleshooting many issues in the running game, both for game and mod developers equally. They  contain what you'd usually see in the console output of the editor. They are all stored in the <code>/logs</code> folder within <code>user://</code>. The most recent log does not have a time stamp (named just <code>godot.log</code> and might be shown as <code>godot</code> if the extension  is hidden). </p> <p>It's common for settings and game saves to be in this folder too. Deleting settings and save files can resolve some issues, but can of course reset progress.  It's safer to move them to another folder as backup. File names differ for each game.</p> <p>Tip</p> <p>If the files do not appear here for a Steam game, disable Steam cloud saves and make sure you are in online mode. They will appear shortly after. Right-click the game in your library sidebar -&gt; Properties -&gt; General -&gt; disable Steam Cloud</p>"},{"location":"guides/modding/global_classes_and_child_nodes/","title":"Global Classes &amp; Child Nodes","text":"<p>This page covers advanced techniques for mod making.</p>"},{"location":"guides/modding/global_classes_and_child_nodes/#global-classes","title":"Global Classes","text":"<p>ModLoader can't support global classes, because they're registered in a settings file stored inside the binary itself.  This means that you can't expose a global class for other dependent mods to use. However, you can work around this  limitation by exposing the class as a child node (see below).</p>"},{"location":"guides/modding/global_classes_and_child_nodes/#child-nodes","title":"Child Nodes","text":"<p>When your mod is initialised it's added as a child to the ModLoader node (shown left). You can also add additional child  nodes to your mod's node if you wish (shown right):</p> <p>This lets you make custom classes available to other mods.</p>"},{"location":"guides/modding/global_classes_and_child_nodes/#example","title":"Example","text":"<p>Example for adding a child node in <code>mod_main.gd</code>. This particular example comes from Brotato's ContentLoader mod: GDScript<pre><code># Add to your mod's `_init` in mod_main.gd\nfunc _add_child_class():\n    var ContentLoader = load(\"res://mods-unpacked/Darkly77-ContentLoader/content_loader.gd\").new()\n    ContentLoader.name = \"ContentLoader\"\n    add_child(ContentLoader)\n</code></pre></p> <p>To use this in a different mod: GDScript<pre><code># Get the class\nvar ContentLoader = get_node(\"/root/ModLoader/Darkly77-ContentLoader/ContentLoader\")\n\n# Use a method from the class\nContentLoader.load_data()\n</code></pre></p>"},{"location":"guides/modding/mod_files/","title":"Mod Files","text":"<p>Every mod you create must have the following 2 files:</p> <ul> <li>manifest.json, which contains metadata for your mod, and</li> <li>mod_main.gd, which is the entrypoint for your mod to start everything it needs</li> </ul>"},{"location":"guides/modding/mod_files/#manifestjson","title":"manifest.json","text":"<p>The <code>manifest.json</code> is a special metadata file that tells the ModLoader information about your mod. You can edit this file manually in Godot or in another editor of your choice, or by using the Mod Tool,  which provides validation and some editing help for each field.</p> <p>It includes a few relatively self-explanatory fields like the mod's <code>name</code> and <code>description</code>,  as well as the <code>namespace</code>, which is usually the authors name, or the name of the group of people that maintain the mod. Both together create your final mod ID when attached together: <code>{namespace}-{name}</code>, for example <code>GodotModding-ExampleMod</code>. This is the identifier that the mod loader and other mods will use to manage your mod. It also includes multiple ways of setting dependencies, which you can learn more about in the  using other mods guide.</p> JSON<pre><code>{\n    \"name\": \"ModName\",\n    \"namespace\": \"AuthorName\",\n    \"version_number\": \"1.0.0\",\n    \"description\": \"Mod description goes here\",\n    \"website_url\": \"https://github.com/example/repo\",\n    \"dependencies\": [\n        \"Add IDs of other mods here, if your mod needs them to work\"\n    ],\n    \"extra\": {\n        \"godot\": {\n            \"authors\": [\"AuthorName\"],\n            \"tags\": [\"tag1\", \"tag2\"],\n            \"description_rich\": \"\",\n            \"optional_dependencies\": [\"IDs your mod should load after if they are loaded\"],\n            \"load_before\": [\"IDs your mod should load before\"],\n            \"incompatibilities\": [\n                \"Add IDs of other mods here, if your mod conflicts with them\"\n            ],\n            \"compatible_mod_loader_version\": [\"6.2.0\"],\n            \"compatible_game_version\": [\"1.2.3\"],\n            \"config_schema\": {}\n        }\n    }\n}\n</code></pre> Tip <p>The manifest uses the structure of Thunderstore packages,  which means you can use the same <code>manifest.json</code> for both your mod and your Thunderstore package.</p>"},{"location":"guides/modding/mod_files/#mod_maingd","title":"mod_main.gd","text":"<p>The <code>mod_main.gd</code> script is the entrypoint for your mod - that means it calls all the fancy ModLoaderMod functions to add script extensions, hooks, mod  translations, and even act as a global class if need be.</p> <p>See ModLoaderApi for more info on script extensions, translations and more.</p> <p>The only thing required for the mod main to work is that it defines an <code>_init()</code> function for the mod loader  to call and that it <code>extends Node</code> at the top. Technically you can even extend any type that inherits  from <code>Node</code>, but it's rarely necessary.</p> <p>The script below contains some boilerplate code to get you started.  It is very similar to what you will get when creating a new mod with the Mod Tool. One thing it does here is define some path to your mod folder and extensions folder, just to avoid repeating the full path every time.</p> Godot 4Godot 3 GDScript<pre><code>extends Node\n\n\nconst GODOTMODDING_EXAMPLEMOD_DIR := \"GodotModding-ExampleMod\"\nconst GODOTMODDING_EXAMPLEMOD_LOG_NAME := \"GodotModding-ExampleMod:Main\"\n\nvar mod_dir_path := \"\"\nvar extensions_dir_path := \"\"\nvar translations_dir_path := \"\"\n\nfunc _init() -&gt; void:\n    mod_dir_path = ModLoaderMod.get_unpacked_dir().path_join(GODOTMODDING_EXAMPLEMOD_DIR)\n    # Add extensions\n    install_script_extensions()\n    # Add translations\n    add_translations()\n\n\nfunc install_script_extensions() -&gt; void:\n    extensions_dir_path = mod_dir_path.path_join(\"extensions\")\n    # ModLoaderMod.install_script_extension(extensions_dir_path.path_join(...))\n\n\nfunc add_translations() -&gt; void:\n    translations_dir_path = mod_dir_path.path_join(\"translations\")\n    # ModLoaderMod.add_translation(translations_dir_path.path_join(...))\n\n\nfunc _ready() -&gt; void:\n    ModLoaderLog.info(\"Ready!\", GODOTMODDING_EXAMPLEMOD_LOG_NAME)\n</code></pre> GDScript<pre><code>extends Node\n\n\nconst GODOTMODDING_EXAMPLEMOD_DIR := \"GodotModding-ExampleMod\"\nconst GODOTMODDING_EXAMPLEMOD_LOG_NAME := \"GodotModding-ExampleMod:Main\"\n\nvar mod_dir_path := \"\"\nvar extensions_dir_path := \"\"\nvar translations_dir_path := \"\"\n\n# Before v6.1.0\n# func _init(modLoader = ModLoader) -&gt; void:\nfunc _init() -&gt; void:\n    mod_dir_path = ModLoaderMod.get_unpacked_dir().plus_file(GODOTMODDING_EXAMPLEMOD_DIR)\n    # Add extensions\n    install_script_extensions()\n    # Add translations\n    add_translations()\n\n\nfunc install_script_extensions() -&gt; void:\n    extensions_dir_path = mod_dir_path.plus_file(\"extensions\")\n    # ModLoaderMod.install_script_extension(extensions_dir_path.plus_file(...))\n\n\nfunc add_translations() -&gt; void:\n    translations_dir_path = mod_dir_path.plus_file(\"translations\")\n    # ModLoaderMod.add_translation(translations_dir_path.plus_file(...))\n\n\nfunc _ready() -&gt; void:\n    ModLoaderLog.info(\"Ready!\", GODOTMODDING_EXAMPLEMOD_LOG_NAME)\n</code></pre> Note <p>The const variable you use to log (<code>GODOTMODDING_EXAMPLEMOD_LOG_NAME</code> in the example above) should always be unique  to your own mod, in every file you use it. Otherwise, if another mod uses the same variable name  (if they want to mod your mod for example), it will cause an error.</p>"},{"location":"guides/modding/mod_files/#tips-best-practices","title":"Tips &amp; Best Practices","text":"<p>GDScript has a style guide you can read here. Following the guide will help your code be more consistent, and make it easier to maintain and expand by other modders.</p> <p>When naming files, use snake_case, and only use the characters <code>A-z</code>, <code>0-9</code>, and <code>_</code>.</p> Note <p>ModLoader mods use hyphens (<code>-</code>) for mod names due to Thunderstore conventions,  but they shouldn't be used for any other file names.</p>"},{"location":"guides/modding/mod_structure/","title":"Mod Structure","text":"<p>Mod file structure is a small but important part of modding. If your files are in the wrong place, they won't be found  by the mod loader and can't work correctly.</p> <p>There are two main types of folders where mods are loaded from - one loads packed and the other unpacked mods. Packed in case of this mod loader just means \"it is a ZIP\", since that's how our mods are distributed. Unpacked is the raw mod code which you can easily edit within the editor. Editor and ZIP require slightly different structures you can see below.</p> <p>Tip</p> <p>It's good to know about the general structure, if just to know what you can and can't change - but if you don't  want to set everything up manually, you can use the Mod Tool to set your new mod project up and  export everything correctly - including all asset imports no matter the name.</p>"},{"location":"guides/modding/mod_structure/#editor","title":"Editor","text":"<p>When developing mods for the Godot Mod Loader, everything is done within the <code>res://mods-unpacked</code> folder. You will place your own mod folder here when working on it. Mod folder names must follow the convention of <code>{Namespace}-{ModName}</code>, which  is also your mod's ID. Using this schema avoids collision with other mod ids, and also allows them to be compatible with  Thunderstore. A mod folder always contains these important files: Text Only<pre><code>res://\n\u2514\u2500\u2500\u2500mods-unpacked\n    \u2514\u2500\u2500\u2500Author-ModName\n        \u251c\u2500\u2500\u2500mod_main.gd\n        \u2514\u2500\u2500\u2500manifest.json\n</code></pre> See Mod Files for info on what those files do.</p> <p>Warning</p> <p>If you have any dependencies, you need while developing your mod, unzip them and place them in <code>res://mods-unpacked</code>. A bug in the Godot editor (any version before 4.4) prevents  using zipped and unpacked mods at the same time (see ZIPs in the Editor below).</p>"},{"location":"guides/modding/mod_structure/#zips","title":"ZIPs","text":"<p>Mod ZIPs should have the structure shown below. It matches the structure of the filesystem when developing mods in the  Godot editor. Yes, the zip itself contains the <code>/mods-unpacked</code> folder - this has to be this way because of how Godot  loads resource packs into the project root directly. </p> <p>Mod users will add their ZIPs to a folder named <code>/mods</code> in the root of the project, which is <code>res://</code> or next to the game executable.</p> <p>ZIP names must follow the convention of <code>{Namespace}-{ModName}-{version}.zip</code> e.g. <code>GodotModding-CoolMod-1.2.3.zip</code>.</p> Godot 4Godot 3 Text Only<pre><code>Author-ModName-1.2.3.zip/\n\u251c\u2500\u2500 .godot/\n\u2502   \u2514\u2500\u2500 imported/\n\u2502       \u2514\u2500\u2500 icon.stex\n\u2514\u2500\u2500 mods-unpacked/\n    \u2514\u2500\u2500 Author-ModName/\n        \u251c\u2500\u2500 mod_main.gd\n        \u251c\u2500\u2500 manifest.json\n        \u251c\u2500\u2500 overwrites.gd\n        \u251c\u2500\u2500 extensions/\n        \u2502   \u2514\u2500\u2500 main.gd\n        \u2514\u2500\u2500 overwrites/\n            \u2514\u2500\u2500 icon.png\n</code></pre> Text Only<pre><code>Author-ModName-1.2.3.zip/\n\u251c\u2500\u2500 .import/\n\u2502   \u2514\u2500\u2500 icon.stex\n\u2514\u2500\u2500 mods-unpacked/\n    \u2514\u2500\u2500 Author-ModName/\n        \u251c\u2500\u2500 mod_main.gd\n        \u251c\u2500\u2500 manifest.json\n        \u251c\u2500\u2500 overwrites.gd\n        \u251c\u2500\u2500 extensions/\n        \u2502   \u2514\u2500\u2500 main.gd\n        \u2514\u2500\u2500 overwrites/\n            \u2514\u2500\u2500 icon.png\n</code></pre> <p>Mod ZIPs need to include any custom assets from the import folder, otherwise Godot won't know they exist.</p> <p>Your mod ZIP's import folder should only include your custom assets. It should not include any vanilla assets.</p>"},{"location":"guides/modding/mod_structure/#zips-in-the-editor","title":"ZIPs in the Editor","text":"<p>Godot has a bug that, in short, means you can't use both unpacked mods (in res://mods-unpacked) and zipped mods  (in res://mods) in the Editor - until 4.4. If you need to use another mod as a dependency, you can unzip it and place it with your mod into <code>res://mods-unpacked/</code>.</p> <p>You can still use mod ZIPs in the editor, when testing your zipped mod for example.  They will load as expected, but nothing from <code>res://mods-unpacked</code> will be loaded.</p>"},{"location":"guides/modding/mod_structure/#the-import-folder","title":"The import folder","text":"Godot 4Godot 3 <p>Godot projects save a version of custom assets, such as PNGs, to a folder within the godot data folder:   <code>res://.godot/imported/</code> (e.g. PNGs are saved as .godot/imported/filename.stex).    Assets are streamed from the files in this folder, rather than from the asset in the file system.</p> <p>Godot projects save a version of custom assets, such as PNGs, to a top-level folder:   <code>res://.import</code> (e.g. PNGs are saved as .import/filename.stex).    Assets are streamed from the files in this folder, rather than from the asset in the file system.</p>"},{"location":"guides/modding/mod_structure/#tips","title":"Tips","text":"<p>It's highly recommended that you prefix all custom assets with <code>modname_*</code>, e.g. <code>modname_weapon1.png</code>.  This makes it much easier to find your custom assets in the import folder, when building the mod ZIP or adding  files to a mod's repo.</p> <p>If you move assets around in the filesystem, Godot won't remove the old files from <code>.import</code>, which can make it bloated  with unused, unreferenced files. To clean up these unused files, delete everything in the import folder and run the game again.  This will re-create only the files that are actually used.</p> <p>Custom assets can usually also be identified by sorting by creation date.</p>"},{"location":"guides/modding/mod_structure/#notes","title":"Notes","text":"<p>If you want to rename existing assets to include a <code>modname_*</code> prefix (as per Tips above), you'll need to do two things: 1. Rename the files themselves.     - Windows has a \"PowerToy\" (download/repo) called Power Rename that will let you do this quickly, and it supports regex.     - To rename with Power Rename:         - Enable the \"Use regular expressions\" option         - Search string: <code>([A-z0-9_!-]+).png</code>         - Replace string: <code>modname_$1.png</code> 2. Update the resource paths.     - You can use VS Code to do this, as its search and replace also supports regex.</p> <p>For (2), here's some example regex to replace PNG filenames in .tres files. It supports these characters in file and folder names: <code>A-z</code>, <code>0-9</code>, and <code>_</code>. See what it's doing on regex101.com.</p> <p>Search: Text Only<pre><code>\\[ext_resource path=\"res:\\/\\/mods-unpacked\\/AuthorName-ModName\\/([A-z0-9_!-\\/]+)\\/([A-z0-9_!-]+).png\n</code></pre></p> <p>Replace: GDScript<pre><code>[ext_resource path=\"res://mods-unpacked/AuthorName-ModName/$1/modname_$2.png\n</code></pre></p>"},{"location":"guides/modding/overwriting_game_resources/","title":"Adding and Replacing Game Resources","text":"<p>With the Godot alone it's possible to replace/overwrite existing game resources, and add resources in specific places in the project. With the Mod Loader, we use a specific convention to both make the process more organized and to apply overwrites at the correct point in the game startup.</p> <p>The system described below can also be used to place assets from your mod folder in specific locations in the game's  file system without messing with your mod structure. Some games require this - Dome Keeper, for  example, loads all upgrade icons from one folder. The code assumes even modded assets to be there when creating new upgrades.</p>"},{"location":"guides/modding/overwriting_game_resources/#overwritesgd","title":"overwrites.gd","text":"<p>The <code>overwrites.gd</code> file is used to define resource overwrites in a separate file. In general, any file in a project  can be overwritten, but we highly recommend that you only use this feature for images, audio and other types that  inherit from <code>Resource</code>.</p> <p>We recommend the following directory structure for your overwrites: Text Only<pre><code>res://\n\u2514\u2500\u2500\u2500mods-unpacked/\n    \u2514\u2500\u2500\u2500Author-ModName/\n        \u251c\u2500\u2500\u2500mod_main.gd\n        \u251c\u2500\u2500\u2500manifest.json\n        \u251c\u2500\u2500\u2500overwrites.gd\n        \u2514\u2500\u2500\u2500overwrites/\n            \u2514\u2500\u2500\u2500original_dir_name/\n                \u2514\u2500\u2500\u2500original_file_name.png\n</code></pre></p> <p>The following steps are required to create an overwrite:</p> <ol> <li>Open the file you want to replace by right-clicking and selecting Open in File Manager.</li> <li>Create a replacement file that matches the metadata of the original file 1:1. For example, for images, make sure     that the resolution is the same.</li> <li>Add the replacement file to the overwrites directory. Ideally, structure your overwrites as shown above.</li> <li>Add the required code to <code>overwrites.gd</code>.</li> </ol> Tip <p>Creating overwrites be done quickly by using the Mod Tool file context menu</p>"},{"location":"guides/modding/overwriting_game_resources/#example","title":"Example","text":""},{"location":"guides/modding/overwriting_game_resources/#using-preload","title":"Using <code>preload</code>","text":"GDScript<pre><code>extends Node\n\nfunc _init():\n    var overwrite_0 = preload(\"res://mods-unpacked/Author-ModName/overwrites/assets/images/GodotModded.png\")\n    overwrite_0.take_over_path(\"res://assets/images/GodotModded.png\")\n</code></pre>"},{"location":"guides/modding/overwriting_game_resources/#using-load","title":"Using <code>load</code>","text":"<p>Load only works if the overwrite goes into script scope (as opposed to staying in function scope) at some point,  otherwise Godot won't be able to find the file. No idea why. There are two ways to do this: a global variable  declaration or a global Array to which the overwrites are appended. The global variable only works for a single  overwrite, so this example uses the Array.</p> Godot 4Godot 3 GDScript<pre><code>extends Node\n\nvar icons: Array # this declaration NEEDS to have script scope\nconst ICONS := [\n    \"GodotModded.png\",\n    \"UpgradeIcon.png\"\n]\nvar mod_icons_folder := \"res://mods-unpacked/Author-ModName/overwrites/assets/icons\"\nvar vanilla_icons_folder := \"res://assets/icons\"\n\nfunc _init():\n    # var icons: Array # this would not work\n    for image in ICONS:\n        var icon_overwrite := load(mod_icons_folder.path_join(image))\n        icon_overwrite.take_over_path(vanilla_icons_folder.path_join(image))\n        icons.append(icon_overwrite)  # this essentially pulls the overwrite into global scope\n</code></pre> GDScript<pre><code>extends Node\n\nvar icons: Array # this declaration NEEDS to have script scope\nconst ICONS := [\n    \"GodotModded.png\",\n    \"UpgradeIcon.png\"\n]\nvar mod_icons_folder := \"res://mods-unpacked/Author-ModName/overwrites/assets/icons\"\nvar vanilla_icons_folder := \"res://assets/icons\"\n\nfunc _init():\n    # var icons: Array # this would not work\n    for image in ICONS:\n        var icon_overwrite := load(mod_icons_folder.plus_file(image))\n        icon_overwrite.take_over_path(vanilla_icons_folder.plus_file(image))\n        icons.append(icon_overwrite)  # this essentially pulls the overwrite into global scope\n</code></pre> <p>``` Instead of using an array of Strings here, you could also use the Directory class to go over each file in a  folder and create and overwrite with it.</p>"},{"location":"guides/modding/script_extensions/","title":"Script Extensions","text":"<p>Script extensions are the preferred way to change, extend and replace behavior of an existing vanilla script.</p> <p>It works by registering an entire file of new script functions as a child script of a vanilla script. Not all methods  from the original script need to be in the extension script.</p> <p>Extensions are based on inheritance,  which is a concept from object-oriented programming. It is recommended that you know a bit about classes  and inheritance before delving deeper.  Note that we won't be making much use of custom named classes, we'll mostly be using inheritance to extend a functions logic and then let the mod loader replace the vanilla script with our custom one. </p> <p>See also</p> <p>API Reference: <code>ModLoaderMod.install_script_extension()</code></p>"},{"location":"guides/modding/script_extensions/#features","title":"Features","text":"<p>Multiple mods can mod the same functions and their changes will accumulate rather than replacing each other (depending on load order).</p> <p>Extensions can change vanilla methods before and after they are called, which allows them to  manipulate both the input parameters and the output value of a function. They can also completely replace vanilla functions, but be aware that that may reduce compatibility, especially with other mods that change  the same function.</p> <p>Since we are working with standard inheritance, we can also add new member variables and functions to the classes that  we extend. </p> <p>Script extensions can also be applied to Autoloads,  if the ModLoader autoload is higher in the load order. You can check the autoload order by setting the mod loader  log level to DEBUG and checking the log. </p> <p>This example script extension changes the path that save files are loaded from in the game Brotato. The path of this script extension would be, by convention, in the <code>/extensions</code> folder and then mirroring the  vanilla file structure: <code>res://mods-unpacked/Author-ModName/extensions/singletons/progress_data.gd</code></p> Godot 4Godot 3 GDScript<pre><code># Our base script is the original game script.\nextends \"res://singletons/progress_data.gd\"\n\n# This overrides the method with the same name, changing the value of its argument:\nfunc load_game_file(path: String = SAVE_PATH) -&gt; void:\n    var modded_path = path + \"--modded.json\"\n\n    # Calling the base method will call the original game method:\n    super(modded_path)\n\n    # Note that if the vanilla script returned something, we would do this instead:\n    #return super(modded_path)\n</code></pre> GDScript<pre><code># Our base script is the original game script.\nextends \"res://singletons/progress_data.gd\"\n\n# This overrides the method with the same name, changing the value of its argument:\nfunc load_game_file(path: String = SAVE_PATH) -&gt; void:\n    var modded_path = path + \"--modded.json\"\n\n    # Calling the base method will call the original game method:\n    .load_game_file(modded_path)\n\n    # Note that if the vanilla script returned something, we would do this instead:\n    #return .load_game_file(modded_path)\n</code></pre> <p>The above example showed how to call the base method by using <code>super()</code> or the <code>.</code> prefix in Godot 3. </p> <p>It changes the input values for the base function before calling it. Similarly, it is also possible to manipulate the  output value by calling the base method first, changing something and then returning that new value, as shown below:</p> Godot 4Godot 3 GDScript<pre><code>func get_playtime_days() -&gt; int:\n    var days = super()\n    return days + 2\n</code></pre> GDScript<pre><code>func get_playtime_days() -&gt; int:\n    var days = .get_playtime_days()\n    return days + 2\n</code></pre> <p>Since we are extending the vanilla base class, not calling the base method would completely replace the method.  But, because all methods from each mod in the load order extend each other in a chain,  doing this would break the chain and usually cause conflicts between mods.</p> <p>To install it, call <code>ModLoaderMod.install_script_extension()</code>  from your mod's <code>mod_main.gd</code>, in <code>_init()</code> or in any function that gets called  by <code>_init()</code>, like the <code>install_script_extensions()</code> functions we usually use by convention.</p> GDScript<pre><code>extends Node\n\nfunc _init():\n    install_script_extensions()\n\nfunc install_script_extensions() -&gt; void:\n    ModLoaderMod.install_script_extension('res://mods-unpacked/Author-ModName/extensions/singletons/progress_data.gd')\n</code></pre>"},{"location":"guides/modding/script_extensions/#limitations","title":"Limitations","text":"<p>Script Extensions will not be applied to scripts that are  <code>preload()</code>ed  in any way. This affects both scripts which are preloaded directly - <code>preload(\"res://player.gd\")</code> - and scripts which are indirectly preloaded by being used in preloaded scenes - <code>preload(\"res://player.tscn\")</code>.  This is a Godot limitation we have yet to find a complete workaround for. For scenes there can be a way to circumvent this limitation by extending the scene that instantiates it. For example, the pause menu in dome keeper was preloaded and instantiated from another scene. The other scene was extended, which  allowed accessing the nodes within the pause menu after it was created, as well as adding new nodes to it.</p> Godot 4Godot 3 <p>Extending global classes (scripts with <code>class_name</code> at the top) is not possible.  To work around this issue, we've created Script Hooks, use them instead of  extensions when necessary.</p> <p>Related Godot Issue</p> <p>#83542</p> <p>It is not possible to replace virtual functions  with a script extension, since the function from the base class will always be called by Godot. Because of this, using <code>._ready()</code> - the <code>_ready()</code> function of the base class - in a script extension will result  in that function being called twice.</p> Info <p>Virtual functions, like <code>_ready()</code> or <code>_init()</code>, are used to execute code when specific \"events\", also called  \"notifications\", occur. You can learn more about them in the  Godot Documentation.</p> <p>Related Godot Issue</p> <p>#33620</p> <p>You can't redefine or overwrite member variables in inheriting scripts. That's simply due to how inheritance works in Godot. This can usually be worked around by using a function like _ready or _init to change their value ahead of time, or by extending the function that uses the variable and changing the value before calling the base method.</p> <p>There is currently no way to insert code into the middle of a function. In the best case scenario, functions are kept  small, or you can ask the developer to split the function into smaller parts for the next update. If that fails, you can copy the vanilla method in its entirety and insert your code in the middle. This is the same as replacing a function  completely though, so your mod will be less compatible with other mods. Additionally, if the game developer changes that function in an update, you will have to update your function to that new code too, or you risk the game breaking or  reintroducing old bugs.</p> <p>Constants do what they should, so they can't be changed or overwritten. Unless the constant holds an Array, in which  case the variable can't be reassigned, but the values within can change without problem.  Dictionaries are in a similar situation, where the dict values can change freely, but the keys are fixed. </p>"},{"location":"guides/modding/script_extensions/#technical-details","title":"Technical Details","text":""},{"location":"guides/modding/script_extensions/#script-inheritance","title":"Script Inheritance","text":"<p>Info</p> <p>This info comes from the docs for the Delta-V mod loader for a full write-up check this blog post.</p> <p>In order to allow modifying game functions without copying the contents of the functions or entire scripts in mod code,  this system makes use of inheritance for hooking. We exploit the fact that all Godot scripts are also classes and may  extend other scripts in the same way how a class may extend another class; this allows mods to include script extensions,  which extend some standard game script and selectively override some methods.</p>"},{"location":"guides/modding/script_extensions/#inheritance-chaining","title":"Inheritance chaining","text":"<p>By using <code>install_script_extension</code>, the Mod Loader builds a chain of scripts which are applied one by one.  The order of the chain is determined by the <code>manifest.json</code> fields  <code>dependencies</code>, <code>optional_dependencies</code> and <code>load_before</code>. </p> <p>If these fields are set correctly, multiple mods should \"just work\" together without any additional work.</p>"},{"location":"guides/modding/script_hooks/","title":"Script Hooks","text":"<p>Available since</p> <p>7.0.0</p> <p>Script Hooks are a new way to mod scripts. Hooks allow you to add a custom Callable, which then calls further modded functions and the vanilla function at the end. The callable needs to fulfil specific  requirements to work.</p> <p>Hooks are slightly more complex to use and little less powerful than Script Extensions,  so prefer using those if possible.</p> <p>Info</p> <p>The Mod Loader makes Script Hooks work by generating new GDScript files, which take the place of the original vanilla  scripts. The newly generated scripts then use the ModLoaderHookChain to call  modded callables one after the other. These callables need to always take the chain as first argument and also call  <code>ModLoaderHookChain.execute_next()</code> once at some point to properly work.</p> <p>There are two ways in which mod hooks can take the place of vanilla scripts:</p> <ol> <li>Dynamic<ul> <li>This does not work in the editor! See Hooks in the Editor below.</li> <li>Generated at runtime by the mod loader. This is automatic, you don't have to do anything.</li> <li>Any file can technically be converted, but the hook file can't be applied if the script is preloaded. </li> </ul> </li> <li>Preprocessed/ built in<ul> <li>These are created during export if the game developer has enabled the Mod Hook preprocessor export addon.</li> <li>You can always hook a preprocessed file, preloaded or not. </li> <li>You can check if a file has a comment similar to this \"ModLoader Hooks - The following code has been automatically      added by the Godot Mod Loader.\" to see if it is already hooked.</li> </ul> </li> </ol> <p>See also</p> <p>API Reference: <code>ModLoaderMod.add_hook()</code> and API Reference: <code>ModLoaderMod.install_script_hooks()</code></p>"},{"location":"guides/modding/script_hooks/#hooks-in-the-editor","title":"Hooks in the editor","text":"<p>The dynamically generated script that our mod hook preprocessor creates cannot be applied in the editor  (at least until 4.4). To work around this issue, you can use the mod tool file system context menu and convert the vanilla file once. Afterward you will be able to test mod hooks as if there were no differences.</p>"},{"location":"guides/modding/script_hooks/#features","title":"Features","text":"<p>Multiple mods can mod the same functions and their changes will accumulate rather than replacing each other (depending on load order).</p> <p>The main feature of mod hooks is that they can mod global classes - scripts which use <code>class_name</code> to be globally accessible. Global classes have a bug which prevents us from using extensions.</p> <p>Hooks can modify member variables by accessing the <code>ModLoaderHookChain.reference_object</code>.  Example: this hook method that is attached to the main node which contains the game's version.</p> Godot 4Godot 3 GDScript<pre><code>func change_version(chain: ModLoaderHookChain) -&gt; void:\n    # Using a typecast here (with \"as\") can help with autocomplete and avoiding errors\n    var main_node := chain.reference_object as MainGame\n    main_node.version = \"Modloader Hooked!\"\n    # _ready, which we are hooking, does not have any arguments\n    chain.execute_next()\n</code></pre> <p>Warning</p> <p>This feature does not exist in Godot 3</p> <p>Similarly to extensions, hooks can also change vanilla methods before and after they are called, which allows them to  manipulate both the input parameters and the output value of a function.  </p> Godot 4Godot 3 GDScript<pre><code># Parameters can be manipulated easily by changing what is passed into .execute_next()\n# The vanilla method (Utilities.format_date) takes 3 arguments, our hook method takes\n# the ModLoaderHookChain followed by the same 3\nfunc time_travel(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:\n    print(\"time travel!\")\n    year -= 100\n    # Just the vanilla arguments are passed along in the same order, wrapped into an Array\n    var val = chain.execute_next([day, month, year])\n    return val\n\n\n# The return value can be manipulated by calling the next hook (or vanilla) first\n# then changing it and returning the new value.\nfunc add_season(chain: ModLoaderHookChain, day: int, month: int, year: int) -&gt; String:\n    var output = chain.execute_next([day, month, year])\n    match month:\n        12, 1, 2:\n            output += \", Winter\"\n        3, 4, 5:\n            output += \", Spring\"\n        6, 7, 8:\n            output += \", Summer\"\n        9, 10, 11:\n            output += \", Autumn\"\n    return output\n</code></pre> <p>Warning</p> <p>This feature does not exist in Godot 3</p> <p>As you may have noticed above, each one of the mod hook functions calls <code>chain.execute_next()</code>. This is almost like calling <code>super()</code> in a script extension - it hands off the call to the next modded, or finally the vanilla method.</p> <p>That means you can also completely replace the vanilla method by never calling <code>chain.execute_next()</code> - but be careful with this as it will likely break all compatibility with other mods that try to hook the same method.</p> <p>Hooks can be applied to Autoloads, but you should really prefer extensions - since Autoloads can't have class_names in any case. It may be possible to hook autoloads earlier in the load order, but this hasn't been tested. Do note that in case it works it is impossible the stop the Autoload's _init from running since hooks are applied during the ModLoader's _ready</p> <p>To install a single hook, call <code>ModLoaderMod.add_hook()</code>  from your mod's <code>mod_main.gd</code>, in <code>_init()</code> or in any function that gets called  by <code>_init()</code>, like the <code>install_script_hook_files()</code> functions we usually use by convention.</p> <p>While a single script extension always extends a whole file, a single script hook only  affects a single method. For convenience, we added an \"install-\" method which applies all hooks from a file:  <code>ModLoaderMod.install_script_hooks()</code>.</p> <p>For single hooks, your function name does not matter, if you set it correctly in <code>add_hook()</code>, it will be found.  However, when using <code>ModLoaderMod.install_script_hooks()</code> with a whole file, all your custom callables need to  have the exact same name as the vanilla function, otherwise they will be ignored.</p> Godot 4Godot 3 GDScript<pre><code>func _init() -&gt; void:\n    ModLoaderMod.add_hook(change_version, \"res://main.gd\", \"_ready\")\n    ModLoaderMod.add_hook(time_travel, \"res://tools/utilities.gd\", \"format_date\")\n    # Multiple hooks can be added to a single method.\n    ModLoaderMod.add_hook(add_season, \"res://tools/utilities.gd\", \"format_date\")\n\n    install_script_hook_files()\n\nfunc install_script_hook_files() -&gt; void:\n    ModLoaderMod.install_script_hooks(\"res://tools/utilities.gd\", \"res://mods-unpacked/godotmodding-TEST/extensions/tools/utilities.hooks.gd\")\n\nfunc change_version(): ...\nfunc time_travel(): ...\nfunc add_season(): ...\n</code></pre> <p>Warning</p> <p>This feature does not exist in Godot 3</p> <p>Common issues</p> <ol> <li>Always make sure you are calling <code>chain.execute_next()</code>!</li> <li>In editor: Make sure the file is converted!</li> </ol>"},{"location":"guides/modding/script_hooks/#limitations","title":"Limitations","text":"<p>Script Hooks don't exist for Godot 3, they are a recent addition. They are also not required in 3 since even global classes can be modded with Script extensions in Godot 3.</p> <p>Script Hooks suffer from the same limitation that Extensions do, they will not be applied to scripts that are  <code>preload()</code>ed  in any way. This affects both scripts which are preloaded directly - <code>preload(\"res://player.gd\")</code> - and scripts which are indirectly preloaded by being used in preloaded scenes - <code>preload(\"res://player.tscn\")</code>.  This is a Godot limitation we have yet to find a workaround for.</p> <p>Hooks can only access the reference object indirectly to change values, which means they cannot add new variables to the  class they are applied to.</p> <p>Subclasses (declared with <code>class</code> inside another class) can't be modded yet. Simply because we didn't add that  feature to the hook preprocessor yet since it's rarely used and was not needed yet. If you need support for this, please  let us know on this issue #516</p> <p>There is technically a small hit to performance when using hooks compared to extensions, but it is negligible in most cases.</p>"},{"location":"guides/modding/testing_debugging/","title":"Testing and Debugging Your Mods","text":""},{"location":"guides/modding/testing_debugging/#quick-steam-workshop-test","title":"Quick Steam Workshop Test","text":"<p>Since your mods will usually be used in the exported game, not from the editor, and there are a few differences between these two environments, you will likely want a way to quickly change something, export and run the game like your  mod players would.</p> <p>For this purpose, you can set the output path in the Mod Tool to a subfolder of the steam workshop folder. </p> <p></p> <p>If you don't have a steam workshop ID yet, you can just place a new folder with any name in its place,  for example <code>.../workshop/content/&lt;game steam id&gt;/quicktest</code></p> <p>On export, this will place your new mod zip right where the game expects it, and you can test your mod in the steam game.</p>"},{"location":"guides/modding/testing_debugging/#logging-and-other-handy-options","title":"Logging and other handy options","text":"<p>If you are missing information about why your mod is not loading correctly or at all, you can enable more logging  information in the output console at the bottom by searching for <code>options.tres</code> in the file system dock.(1)  Double-clicking this file will open the Mod Loader Options in the inspector(2).  There are multiple options - the \"current\" or default resource at the top and some feature overrides - there is  usually an editor-specific override, which you will want to fold out by clicking on the box. </p> <ol> <li>Located in the bottom left corner by default</li> <li>Located on the right side by default</li> </ol> <p> </p> <p>These options can set a few useful options, like the log level - setting this to DEBUG will allow you to see much more  information about the loading process. </p> <p>If you are upgrading a mod to a newer version, we also recommend you to disable ignoring deprecation errors - these errors will tell you where you need to fix your mod so that it doesn't break for the  next GML version.</p>"},{"location":"guides/modding/using_other_mods/","title":"Using Other Mods","text":"<p>There are many ways to use and interact with other mods - and most of them require the other mod to be present. Dependencies are how you can ensure that it is always the case.</p>"},{"location":"guides/modding/using_other_mods/#dependencies-and-load-order","title":"Dependencies and Load Order","text":"<p>GML has a dependency system that allows your mod to safely interact and depend on other mods without causing accidental game crashes. There are multiple types of dependencies you can use for your mod, but all of them are set from the <code>manifest.json</code>.</p>"},{"location":"guides/modding/using_other_mods/#standard-dependencies","title":"Standard Dependencies","text":"<p>Adding another mod's mod ID to the <code>dependencies</code> list in your manifest denotes that the other mod is  required for your mod to work. If the other mod is not present at all or was disabled by the user, your  mod will automatically be disabled by the mod loader too. </p> <p>If your mod depends on another mod, it will always be loaded after the other mod, so everything is initialized by the time you access it.</p>"},{"location":"guides/modding/using_other_mods/#optional-dependencies","title":"Optional Dependencies","text":"<p>Adding <code>optional_dependencies</code> in the <code>extra</code> section will only cause your mod to be loaded after other  mods you add to the list, but it will not cause your mod to be disabled when any other mod is  not present or not loaded. </p> <p>This is useful when you want to change the behaviour of another mod to fit better with your own, or to increase  compatibility. To ensure that you can access the other mod, you should check  <code>ModLoaderMod.is_mod_active()</code> before you access  anything specific to that mod.</p>"},{"location":"guides/modding/using_other_mods/#load-before","title":"Load Before","text":"<p>Sometimes, when modding other mods, you will need your mod to load before another mod - for example, when both mods are planning to replace one specific asset, the first one loaded will apply. For this, you can add the other mod's ID to your <code>load_before</code> list and your mod will be loaded first. Note that you can't load before and depend on the same mod simultaneously.</p>"},{"location":"guides/modding/using_other_mods/#distribution-with-dependencies","title":"Distribution With Dependencies","text":"<p>Depending on how you share your mod with others, you will have to make sure that mod users get all dependencies they need for your mod to work.</p>"},{"location":"guides/modding/using_other_mods/#steam-workshop","title":"Steam Workshop","text":"<p>Steam Workshop allows you to add other Steam Workshop items as \"required items\". If you add another mod here, it will automatically be downloaded when someone subscribes to your mod.</p> <p> </p>"},{"location":"guides/modding/using_other_mods/#thunderstore","title":"Thunderstore","text":"<p>Thunderstore packages also have a manifest.json at the root, but their dependencies require a specific mod  version to be set in the following format <code>{namespace}-{name}-{version}</code>, e.g. <code>GodotModding-ExampleMod-2.1.4</code></p>"},{"location":"guides/modding/tools/decompile_games/","title":"Decompiling Games","text":"<p>Please be respectful to game developers.</p> <p>Do not share any of the game's assets or source code, unless you have explicit permission from the developer. </p> <p>The mod loader is made in a way that should never require your mod to contain any of the vanilla files. If your mod is in version control and in a public git repository, make sure it only contains your own files and use  a properly configured <code>.gitignore</code>.</p> <p>Decompiling the game allows us to have a complete and working version, where we can see every line of code, every scene  and every resource. Without this, modding would have to be done blindly, and we'd have to guess which functions exist -  pretty much impossible. </p> <p>Godot games can easily be decompiled using Godot RE Tools. We recommend downloading the latest release, as it is  frequently updated. Recent versions have greatly improved user experience and speed, big thanks to @nikitalita for  maintaining the project! </p> <p>You can find the full version overview on their GitHub releases page. </p> <p>Decompiling with GDRE is simple: </p> <ol> <li>Find the game files. You specifically need the <code>&lt;GAME NAME&gt;.pck</code> file <ul> <li>if the <code>.pck</code> is not in this folder, proceed with the <code>.exe</code> or <code>.app</code> - they contain the pck. </li> </ul> </li> <li>Open the game file in GDRE, there are multiple ways to do this<ul> <li>The simple: drag and drop the file into the GDRE window</li> <li>The traditional: in the application, select <code>RE Tools</code> in the top menu bar -&gt; <code>Recover Project...</code> -&gt; then navigate to, and select the game file</li> <li>The permanent: right-click the <code>.pck</code> in your file explorer -&gt; open with -&gt; select GDRE (enable always use this option if you decomp frequently)</li> </ul> </li> <li>Once opened, wait until decompiled, then choose a location to save the recovered files to          Make sure the default \"Full recovery\" option wasn't accidentally changed and that no folder was unchecked in the list.</li> <li>Have a quick read through the export log, it will tell you which version     of Godot was used to create the project. You need to use the exact same version to avoid crashes. </li> <li>Extraction done! Start Godot and open the game</li> </ol>"},{"location":"guides/modding/tools/godot_steam/","title":"GodotSteam","text":"<p>The standard version of Godot doesn't have native support for the Steam SDK. This means that, if the game you're editing has Steam support, it probably won't run. To solve this, use a modified version of the Godot editor called GodotSteam.</p> <p>You'll want to get the GodotSteam release version that matches your game's version (eg. Godot 3.5 is here).  Also note that GodotSteam comes as a GDNative/GDExtension plugin version - both work, but the full pre-compiled editor  is simpler to get running.</p> <p>You will usually be able to get the Godot version from the gdre export log, and you can usually  take the newest GodotSteam version that supports it. To get the exact version you will usually have to ask the game developer - and sometimes the modding guide for each game will tell you.</p>"},{"location":"guides/modding/tools/mod_tool/","title":"The Mod Loader Mod Development Tool","text":"<p>The Mod Tool or Dev Tool is a plugin we made for the Godot Editor to make various modding tasks easier.</p>"},{"location":"guides/modding/tools/mod_tool/#installation","title":"Installation","text":"<p>Some games, like Dome Keeper, already have the mod tool installed, but not activated. In that case you can skip past the download section. </p> <p>See: Godot Docs: Plugin Installation</p> <p>Make sure to also enable the mod tool in the project settings  (top bar &gt; Project &gt; Project settings... &gt; Plugins tab &gt; mod tool &gt; enable). </p> <p></p> <p>Once activated, you will find a new \"Mod Tool\" button in the view selection bar at the top of the editor.</p> <p>Pressing it will open the main mod tool panel for you.</p> <p></p> <p>Apart from the main panel, the mod tool also adds more modding-specific context actions   to the file system dock.</p> <p>Note</p> <p>Sometimes you may need to restart the editor after enabling the plugin.</p>"},{"location":"guides/modding/tools/mod_tool/#main-panel","title":"Main Panel","text":""},{"location":"guides/modding/tools/mod_tool/#connecting-your-mod","title":"Connecting your mod","text":"<p>Connecting your mod allows the dev tool to correctly place newly created files, edit the correct manifest,  and export the correct mod once you are done.</p> <p>In the lower right section of the panel, you can connect any mod that is currently in the <code>/mods-unpacked</code> folder. </p> <p>If you don't have a mod yet, you can also create a new one here - it will ask you for the name and namespace (explained in mod files &gt; manifest.json) and will then create a new mod folder with all the required files. </p>"},{"location":"guides/modding/tools/mod_tool/#manifest-editor","title":"Manifest Editor","text":"<p>The manifest editor makes editing metadata a bit easier, you don't need to know how json works or format it correctly, and you will get some editing hints when hovering over the input labels.</p> <p>Tip</p> <p>When you've made your edits, don't forget to press the save button in the top right.</p> <p>In case of errors, you can hover the icon and see why validation failed.</p> <p></p>"},{"location":"guides/modding/tools/mod_tool/#exporting","title":"Exporting","text":"<p>Exporting using the mod tool is very simple:</p> <ol> <li>Choose an export path<ul> <li>this can be any folder or perhaps the steam workshop folder for quick tests</li> </ul> </li> <li>Press the export button</li> <li>And test your mod ;)</li> </ol>"},{"location":"guides/modding/tools/mod_tool/#file-system-context-menu","title":"File System Context Menu","text":"<p>The context menu appears when you right-click any files. Which extra context actions you  will get depends on the file type. All mod tool actions have the prefix \"Mod Tool\" to make  it easier to tell them apart from standard actions.</p>"},{"location":"guides/modding/tools/mod_tool/#resource-actions","title":"Resource Actions","text":"<p>Most things you can save to file in Godot are Resources. Their job is to store data and provide it for your code to use. The resource action is to create an overwrite,  which allows you to replace vanilla files with modded files.</p> <p></p> <p>The action will place a copy of the Resource into your mod folder and add it to the  <code>overwrites.gd</code> file.</p> <p>The most common Resources you probably want to change are images (<code>.png</code>, <code>.jpg</code>, <code>.svg</code>, ...)  and audio (<code>.wav</code>, <code>.ogg</code>, ...).</p>"},{"location":"guides/modding/tools/mod_tool/#script-actions","title":"Script Actions","text":"<p>Scripts are the main thing we want to mod and there are two ways to mod them:</p> <ol> <li>Extensions - prefer these when possible</li> <li>Hooks - use them when a script has a <code>class_name</code> at the top</li> </ol> <p></p> <p>The \"Create Script Extension\" action simply creates a new script, correctly adds the vanilla <code>extends</code>  path at the top, and finally adds the modded script path to your <code>mod_main.gd</code>. </p> <p>The \"Create Mod Hook File\" action is similar, just for hooks - it creates a new script that extends <code>Object</code> and adds it to <code>mod_main.gd</code>.</p> <p>The Convert action processes a script so that hooks can be used in the editor Without this step, testing hooks can get cumbersome since you would always have to test on the compiled game. Once converted, the action changes to an undo action, just in case you need to go back to the original vanilla script. After convert and revert always save the file once to avoid accidentally converting the same script twice (the godot editor doesn't really let us save to file properly after changing it.)</p> <p>Yes, scripts are technically also Resources, but for our case there are better ways to change scripts  than pure overwrites.</p>"},{"location":"guides/modding/tools/workshop_uploader/","title":"Steam Workshop Uploader","text":"<p>Documentation in progress</p>"},{"location":"guides/modding/tools/workshop_uploader/#usage","title":"Usage","text":"<p>Usually, uploading is done through the godot-workshop-utility. From game to game this workshop utility may look slightly different, depending on how the developer implemented it.  You may find the uploader on a separate Steam beta branch, as a startup option, or as a scene to run individually in  the decompiled source code - which option was chosen should be somewhere in your game's specific documentation. </p> <p>The interface has at least one required and two optional input fields:</p> <ol> <li>The required one wants the file path to your mod file, this is the bundle of zipped files you have created  when you exported your mod.  </li> <li>The first optional input wants the file path to a preview image, this is the icon that will be visible in the Steam  Workshop. More about it in a second.</li> <li>The second optional input is for the Steam Workshop item ID. If this is your first upload, you can leave it empty and Steam will generate a new ID. If you want to update one of your existing items, enter the item's ID - if you forgot to keep note of it, you can still find it at the end of the url on the workshop item page. </li> </ol> <p>The icon size should not exceed 1MB, otherwise the workshop item upload will be rejected. We've found a 512 * 512px PNG works best as icon.</p> <p>The Steamworks documentation also notes:</p> <p>The format should be one that both the web and the application (if necessary) can render. Suggested formats include JPG, PNG and GIF. Be sure your app has its Steam Cloud quota and number of files set, as preview images are stored under the user's Cloud. If your app has no Cloud values set, this call will fail.</p> <p>While GIFs work on Steam, Godot applications can't easily render them, so if there is an in-game preview it may break. The cloud quota is something the developer sets, this is usually set pretty high and should not be an issue though.</p>"},{"location":"guides/modding/tools/workshop_uploader/#troubleshooting","title":"Troubleshooting","text":"<p>Common Issue</p> <p>Steam needs to be running and your session needs to be online while you use this tool.</p> <p>You also need the GodotSteam version of Godot.</p> <p>The most common issue is error 25, which is usually caused by the icon being wrong in some way.  If you have this issue and have followed the notes above, you can try the upload without an icon. Ugly, but usually works.</p> <p>There may also be a possible workaround for the icon upload using SteamCMD, as described here:  https://steamcommunity.com/sharedfiles/filedetails/?id=2936720761 (or: Archived)</p> <p>If the upload fails, Steam returns an error code. These error codes have a specific message which may help. </p> Code Name Message <code>1</code> <code>OK</code> The operation completed successfully. <code>8</code> <code>InvalidParam</code> One of the submission fields contains something not being accepted by that field. <code>9</code> <code>FileNotFound</code> The uploaded file could not be found. <code>14</code> <code>DuplicateName</code> The user already has a Steam Workshop item with that name. <code>15</code> <code>AccessDenied</code> There was a problem trying to save the title and description. Access was denied. <code>16</code> <code>Timeout</code> The operation took longer than expected. Have the user retry the creation process. <code>17</code> <code>Banned</code> The user doesn't have permission to upload content to this hub because they have an active VAC or Game ban. <code>20</code> <code>ServiceUnavailable</code> The workshop server hosting the content is having issues - have the user retry. <code>21</code> <code>NotLoggedOn</code> The user is not currently logged into Steam. <code>24</code> <code>InsufficientPrivilege</code> The user is currently restricted from uploading content due to a hub ban, account lock, or community ban. They would need to contact Steam Support. <code>25</code> <code>LimitExceeded</code> The user has exceeded their Steam Cloud quota. Have them remove some items and try again. <code>29</code> <code>DuplicateRequest</code> The file was already successfully uploaded. The user just needs to refresh. <code>44</code> <code>ServiceReadOnly</code> Due to a recent password or email change, the user is not allowed to upload new content. Usually this restriction will expire in 5 days, but can last up to 30 days if the account has been inactive recently. <p>Reference:</p> <ul> <li>Error codes for the upload</li> <li>All Steamworks error codes</li> <li>Setting a Workshop item icon</li> </ul>"},{"location":"misc/breaking_changes/","title":"Breaking Changes","text":"<p>This page lists any breaking changes that occur with ModLoader releases.</p>"},{"location":"misc/breaking_changes/#v610","title":"v6.1.0","text":"<p>Please note that this update may break mods that still rely on the <code>modLoader</code> argument in their <code>_init()</code> function. To mitigate this, a fallback and deprecation warning has been implemented that passes <code>self</code> as an argument if any arguments are detected in the <code>mod_main.gd</code> <code>_init()</code> function.</p>"},{"location":"misc/breaking_changes/#v602","title":"v6.0.2","text":"<p>It is no longer allowed to have the same <code>mod_id</code> listed in both the <code>optional_dependencies</code> and <code>dependencies</code> sections, or in both the <code>load_before</code> and <code>incompatibilities</code> sections.</p> <p>However, since the <code>optional_dependencies</code> and <code>load_before</code> features were introduced in v6.0.0, it is highly unlikely that such conflicts exist.</p>"},{"location":"misc/breaking_changes/#v601","title":"v6.0.1","text":"<p>Mods are now always unpacked and loaded into ModLoaderStore.mod_data. This change can potentially break mod lists that rely on having only loaded mods in <code>mod_data</code>. Consequently, these mod lists may display mods that are currently not loaded. To address this issue, authors of mod lists need to adapt their code to check the new <code>is_active</code> flag.</p>"},{"location":"misc/breaking_changes/#v600","title":"v6.0.0","text":""},{"location":"misc/breaking_changes/#deprecation-messages","title":"Deprecation Messages","text":"<p>As outlined in the v6 release notes, ModLoader v6 has refactored its entire codebase. This meant we needed to deprecate certain methods and classes, but we've also added new deprecation methods to ensure these changes won't break active mods.</p> <p>If you try to use an old method, you'll get an error in the editor until it's fixed. The error message will tell you exactly what needs to change.</p> <p>See the Deprecated section below for the full list of changes.</p>"},{"location":"misc/breaking_changes/#public-classes-api","title":"Public Classes (API)","text":"<p>There are several new classes in the <code>api</code> directory, which is where all the publicly accessible methods are. These replace using <code>ModLoader.*</code> and <code>ModLoaderUtils.*</code> (see Deprecated below). The main classes you'll use are: * ModLoaderMod - Everything related to mod setup, such as <code>install_script_extension()</code>. * ModLoaderLog - All logging methods.</p>"},{"location":"misc/breaking_changes/#internal-classes","title":"Internal Classes","text":"<p>Some mods directly accessed variables and constants on <code>ModLoader</code>, for example <code>mod_data</code> or <code>UNPACKED_DIR</code>. Data such as this is now considered internal, and should not be accessed directly (this includes any method/variable from the <code>ModLoader</code> or <code>ModLoaderStore</code> classes). Instead, we have introduced new methods in <code>ModLoaderMod</code> to access these variables, such as <code>ModLoaderMod.get_unpacked_dir()</code> and <code>ModLoaderMod.get_mod_data_all()</code>.</p>"},{"location":"misc/breaking_changes/#configs","title":"Configs","text":"<ul> <li>The value for <code>compatible_mod_loader_version</code> no longer accepts a string. It needs to be passed an array instead.</li> <li>The <code>config_defaults</code> field in manifest.json has been removed. It is no longer used for specifying default configuration values.</li> <li>A new field called <code>config_schema</code> has been introduced in manifest.json. This field allows you to specify a JSONSchema for your Mod Configuration. JSONSchema provides a way to define the structure and validation rules for your configuration.</li> </ul> Note <p>There is currently no fallback mechanism for migrating old configurations to the new system. You will need to update your mod to adapt to the new configuration structure.</p>"},{"location":"misc/breaking_changes/#others","title":"Others","text":"<ul> <li>Fixed a bug in the <code>mod_id</code> validation where it was possible to create a <code>mod_id</code> with fewer than 7 characters.</li> <li>Changed the mod config directory from <code>res://</code> to <code>user://</code>.</li> </ul>"},{"location":"misc/breaking_changes/#deprecated","title":"Deprecated","text":"<p>Here's a list of every method and variable that is deprecated in v6. You can use a search &amp; replace to update the old methods in your mod.</p>"},{"location":"misc/breaking_changes/#setup","title":"Setup","text":"Old (Search) New (Replace) <code>ModLoader.add_translation_from_resource</code> <code>ModLoaderMod.add_translation</code> <code>ModLoader.append_node_in_scene</code> <code>ModLoaderMod.append_node_in_scene</code> <code>ModLoader.get_mod_config</code> <code>ModLoaderConfig.get_config</code> <code>ModLoader.install_script_extension</code> <code>ModLoaderMod.install_script_extension</code> <code>ModLoader.mod_data</code> <code>ModLoaderMod.get_mod_data_all()</code> <code>ModLoader.register_global_classes_from_array</code> <code>ModLoaderMod.register_global_classes_from_array</code> <code>ModLoader.save_scene</code> <code>ModLoaderMod.save_scene</code> <code>ModLoader.UNPACKED_DIR</code> <code>ModLoaderMod.get_unpacked_dir()</code>"},{"location":"misc/breaking_changes/#logging","title":"Logging","text":"Note <p>Running a search &amp; replace from <code>ModLoaderUtils.log_</code> to <code>ModLoaderLog.</code> will fix all of these at once.</p> Old (Search) New (Replace) <code>ModLoaderUtils.log_debug_json_print</code> <code>ModLoaderLog.debug_json_print</code> <code>ModLoaderUtils.log_debug</code> <code>ModLoaderLog.debug</code> <code>ModLoaderUtils.log_error</code> <code>ModLoaderLog.error</code> <code>ModLoaderUtils.log_fatal</code> <code>ModLoaderLog.fatal</code> <code>ModLoaderUtils.log_info</code> <code>ModLoaderLog.info</code> <code>ModLoaderUtils.log_success</code> <code>ModLoaderLog.success</code> <code>ModLoaderUtils.log_warning</code> <code>ModLoaderLog.warning</code>"},{"location":"misc/breaking_changes/#v501","title":"v5.0.1","text":"<p>New validation may make existing mods invalid: * #71 - Disallow leading zeros and overly long versions * #91 - Mod IDs listed in a mod manifest's <code>dependencies</code> and <code>incompatibilities</code> are now validated</p>"},{"location":"misc/breaking_changes/#v400","title":"v4.0.0","text":"<ul> <li>ModLoader has been moved to the <code>res://addons/</code> directory.</li> <li>The new location is autoloaded in the same way the old one was, with the same file (mod_loader.gd).</li> <li>Nothing else needs to change in your autoloads. There are other new classes, but they'll be loaded automatically.</li> <li>Logging in mods is now handled via the ModLoaderUtils class, which provides a host of new logging options.</li> </ul>"},{"location":"misc/breaking_changes/#renamed-methods","title":"Renamed Methods","text":"Old (Search) New (Replace) <code>ModLoader.mod_log</code> <code>ModLoaderUtils.log_info</code> <code>ModLoader.dev_log</code> <code>ModLoaderUtils.log_debug</code>"},{"location":"misc/breaking_changes/#v310","title":"v3.1.0","text":"<ul> <li>All funcs have been converted to snake_case (see table below, and PR #32 for more info)</li> <li>meta.json is renamed to manifest.json, and its required keys have changed</li> <li>See the example manifest.json for the current structure.</li> <li>See also: <code>REQUIRED_MANIFEST_KEYS_ROOT</code> and <code>REQUIRED_MANIFEST_KEYS_EXTRA</code> in <code>mod_manifest.gd</code></li> </ul>"},{"location":"misc/breaking_changes/#renamed-methods_1","title":"Renamed Methods","text":"Old (Search) New (Replace) <code>installScriptExtension</code> <code>install_script_extension</code> <code>addTranslationFromResource</code> <code>add_translation_from_resource</code> <code>appendNodeInScene</code> <code>append_node_in_scene</code> <code>saveScene</code> <code>save_scene</code>"},{"location":"misc/breaking_changes/#v300","title":"v3.0.0","text":"<ul> <li>Two files have been renamed:</li> <li><code>ModMain.gd</code> -&gt; <code>mod_main.gd</code></li> <li><code>_meta.json</code> -&gt; <code>manifest.json</code></li> <li>The structure of the manifest JSON has changed.</li> <li>See README.md for an example.</li> <li>This file was previously named <code>_meta.json</code></li> </ul>"},{"location":"misc/known_issues/","title":"Known Issues","text":"<p>This page lists any known issues currently in a ModLoader release.</p>"},{"location":"misc/known_issues/#v600","title":"v6.0.0","text":""},{"location":"misc/known_issues/#user-profiles","title":"User Profiles","text":"<p>???+ This issue has been resolved in v6.0.1 and v6.0.2. Please update your Mod Loader installation to the latest version!</p> <p>When switching from a profile where a mod is inactive to a profile where the same mod is active, the active state of all other profiles is automatically set to active as well.</p>"},{"location":"misc/upcoming_features/","title":"Upcoming Features","text":"<p>This page cover features that are currently only on the development branch.</p> <p>When features here are merged into main and published in a release, their content will be moved to the proper location.</p>"}]}